<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>标准库 on 编程语言</title><link>https://before80.github.io/lang/c/std/</link><description>Recent content in 标准库 on 编程语言</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 11 Apr 2025 19:34:03 +0800</lastBuildDate><atom:link href="https://before80.github.io/lang/c/std/index.xml" rel="self" type="application/rss+xml"/><item><title>&lt;limits.h></title><link>https://before80.github.io/lang/c/std/limits/</link><pubDate>Wed, 16 Apr 2025 20:33:03 +0800</pubDate><guid>https://before80.github.io/lang/c/std/limits/</guid><description>类型 宏 BITINT_MAXWIDTH 原址：https://zh.cppreference.com/w/c/header/limits ​ 类型说明符 _BitInt(N) 中的位精确整数支持的最</description></item><item><title>iso646</title><link>https://before80.github.io/lang/c/std/iso646/</link><pubDate>Wed, 16 Apr 2025 20:29:43 +0800</pubDate><guid>https://before80.github.io/lang/c/std/iso646/</guid><description>类型 宏 and 原址： 1 #define and &amp;amp;&amp;amp; and_eq 原址： 1 #define and_eq &amp;amp;= bitand 原址： 1 #define bitand &amp;amp; bitor 原址： 1 #define bitor | compl 原址： 1 #define compl ~ ​ 按位取反运算符 ~ not 原址： 1 #define not ! not_eq 原址： 1 #define not_eq != or 原</description></item><item><title>&lt;float.h></title><link>https://before80.github.io/lang/c/std/float/</link><pubDate>Wed, 16 Apr 2025 19:58:10 +0800</pubDate><guid>https://before80.github.io/lang/c/std/float/</guid><description>类型 宏 DBL_DECIMAL_DIG 原址：https://zh.cppreference.com/w/c/header/float ​ 将 double 转换为带有至少 DBL_DECIMAL_DIG 个数位的十进制数</description></item><item><title>&lt;fenv.h></title><link>https://before80.github.io/lang/c/std/fenv/</link><pubDate>Wed, 16 Apr 2025 17:37:26 +0800</pubDate><guid>https://before80.github.io/lang/c/std/fenv/</guid><description>类型 宏 FE_ALL_EXCEPT 原址：https://zh.cppreference.com/w/c/numeric/fenv/FE_exceptions 1 2 3 #define FE_ALL_EXCEPT</description></item><item><title>&lt;complex.h></title><link>https://before80.github.io/lang/c/std/complex/</link><pubDate>Wed, 16 Apr 2025 17:30:43 +0800</pubDate><guid>https://before80.github.io/lang/c/std/complex/</guid><description>类型 宏 I 原址： _Complex_I 原址： _Imaginary_I 原址： complex 原址： imaginary 原址： 函数 CMPLX 原址： CMPLXF 原址： CMPLXL 原址： cabs 原址： cabsf 原址： cabsl 原址： cacos 原址： cacosf 原址： cacosh 原址： cacoshf 原址： cacoshl 原址： cacosl</description></item><item><title>&lt;uchar.h></title><link>https://before80.github.io/lang/c/std/uchar/</link><pubDate>Wed, 16 Apr 2025 14:39:40 +0800</pubDate><guid>https://before80.github.io/lang/c/std/uchar/</guid><description>类型 size_t 原址：https://zh.cppreference.com/w/c/types/size_t 1 typedef /* 由实现定义 */ size_t; ​ size_t 是 offseto</description></item><item><title>&lt;locale.h></title><link>https://before80.github.io/lang/c/std/locale/</link><pubDate>Wed, 16 Apr 2025 14:23:19 +0800</pubDate><guid>https://before80.github.io/lang/c/std/locale/</guid><description>类型 宏 函数 NULL 原址：https://zh.cppreference.com/w/c/types/NULL 1 #define NULL /* 由实现定义 */ ​ 宏 NULL 是实现定义的</description></item><item><title>&lt;wchar.h></title><link>https://before80.github.io/lang/c/std/wchar/</link><pubDate>Wed, 16 Apr 2025 14:16:40 +0800</pubDate><guid>https://before80.github.io/lang/c/std/wchar/</guid><description>类型 size_t 原址：https://zh.cppreference.com/w/c/types/size_t 1 typedef /* 由实现定义 */ size_t; ​ size_t 是 offseto</description></item><item><title>&lt;time.h></title><link>https://before80.github.io/lang/c/std/time/</link><pubDate>Wed, 16 Apr 2025 14:16:31 +0800</pubDate><guid>https://before80.github.io/lang/c/std/time/</guid><description>类型 size_t 原址：https://zh.cppreference.com/w/c/types/size_t 1 typedef /* 由实现定义 */ size_t; ​ size_t 是 offseto</description></item><item><title>&lt;string.h></title><link>https://before80.github.io/lang/c/std/string/</link><pubDate>Wed, 16 Apr 2025 14:16:24 +0800</pubDate><guid>https://before80.github.io/lang/c/std/string/</guid><description>类型 size_t 原址：https://zh.cppreference.com/w/c/types/size_t 1 typedef /* 由实现定义 */ size_t; ​ size_t 是 offseto</description></item><item><title>&lt;inttypes.h></title><link>https://before80.github.io/lang/c/std/inttypes/</link><pubDate>Wed, 16 Apr 2025 12:09:12 +0800</pubDate><guid>https://before80.github.io/lang/c/std/inttypes/</guid><description>类型 宏 函数 imaxabs 原址：https://zh.cppreference.com/w/c/numeric/math/abs 1 2 3 int abs( int n ); long labs( long n );</description></item><item><title> &lt;stdio.h></title><link>https://before80.github.io/lang/c/std/stdio/</link><pubDate>Tue, 15 Apr 2025 19:56:16 +0800</pubDate><guid>https://before80.github.io/lang/c/std/stdio/</guid><description>类型 FILE 原址：https://zh.cppreference.com/w/c/io/FILE 1 typedef /* 未指明 */ FILE; ​ C 标准没有规定 FILE 是否为一个完整的</description></item><item><title>&lt;threads.h></title><link>https://before80.github.io/lang/c/std/threads/</link><pubDate>Tue, 15 Apr 2025 16:56:20 +0800</pubDate><guid>https://before80.github.io/lang/c/std/threads/</guid><description>类型 cnd_t 原址： 1 typedef /* 见描述 */ cnd_t; ​ 条件变量标识符 mtx_t 原址： 1 typedef /* 见描述 */ mtx_t; ​ 互斥体标识符 thrd_start_t 原址： 1 typedef /* 见描述 */ thrd_start_t; thrd_t 原址： 1 typedef /* 见描述 */ thrd_t; tss_dtor_t 原址： 1</description></item><item><title>&lt;ctype.h></title><link>https://before80.github.io/lang/c/std/ctype/</link><pubDate>Tue, 15 Apr 2025 09:12:20 +0800</pubDate><guid>https://before80.github.io/lang/c/std/ctype/</guid><description>类型 宏 函数 isalnum 原址：https://zh.cppreference.com/w/c/string/byte/isalnum 1 int isalnum( int ch ); ​ 检查给</description></item><item><title>&lt;assert.h></title><link>https://before80.github.io/lang/c/std/assert/</link><pubDate>Mon, 14 Apr 2025 23:18:36 +0800</pubDate><guid>https://before80.github.io/lang/c/std/assert/</guid><description>宏 assert 原址：https://zh.cppreference.com/w/c/error/assert 1 2 3 4 5 6 7 8 9 10 11 12 13 // (C23 前) #ifdef NDEBUG #define assert(condition)</description></item><item><title>&lt;errno.h></title><link>https://before80.github.io/lang/c/std/errno/</link><pubDate>Mon, 14 Apr 2025 23:11:56 +0800</pubDate><guid>https://before80.github.io/lang/c/std/errno/</guid><description>类型 宏 EDOM 原址：https://zh.cppreference.com/w/c/error/errno_macros 1 #define EDOM /* 由实现定义 */ EILSEQ 原址</description></item><item><title>&lt;stdarg.h></title><link>https://before80.github.io/lang/c/std/stdarg/</link><pubDate>Mon, 14 Apr 2025 22:51:57 +0800</pubDate><guid>https://before80.github.io/lang/c/std/stdarg/</guid><description>类型 va_list 原址：https://zh.cppreference.com/w/c/variadic/va_list 1 /* 未指明 */ va_list; ​ va_list 是一个完整对象</description></item><item><title>&lt;setjmp.h></title><link>https://before80.github.io/lang/c/std/setjmp/</link><pubDate>Mon, 14 Apr 2025 22:34:39 +0800</pubDate><guid>https://before80.github.io/lang/c/std/setjmp/</guid><description>类型 jmp_buf 原址：https://zh.cppreference.com/w/c/program/jmp_buf 1 typedef /* 未指明 */ jmp_buf; ​ jmp_buf 类型是适合于存</description></item><item><title>&lt;signal.h></title><link>https://before80.github.io/lang/c/std/signal/</link><pubDate>Mon, 14 Apr 2025 22:17:16 +0800</pubDate><guid>https://before80.github.io/lang/c/std/signal/</guid><description>类型 sig_atomic_t 原址：https://zh.cppreference.com/w/c/program/sig_atomic_t 1 typedef /* 未指明 */ sig_atomic_t; ​ 即使在</description></item><item><title>&lt;stddef.h></title><link>https://before80.github.io/lang/c/std/stddef/</link><pubDate>Mon, 14 Apr 2025 22:03:04 +0800</pubDate><guid>https://before80.github.io/lang/c/std/stddef/</guid><description>类型 max_align_t 原址：https://zh.cppreference.com/w/c/types/max_align_t 1 typedef /* 由实现定义 */ max_align_t; // (C11 起) ​</description></item><item><title>&lt;stdlib.h></title><link>https://before80.github.io/lang/c/std/stdlib/</link><pubDate>Mon, 14 Apr 2025 16:54:35 +0800</pubDate><guid>https://before80.github.io/lang/c/std/stdlib/</guid><description>类型 constraint_handler_t 原址：https://zh.cppreference.com/w/c/error/set_constraint_handler_s 1 2</description></item></channel></rss>