<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程语言</title><link>https://before80.github.io/lang/</link><description>Recent content on 编程语言</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://before80.github.io/lang/index.xml" rel="self" type="application/rss+xml"/><item><title>&lt;threads.h></title><link>https://before80.github.io/lang/c/std/threads/</link><pubDate>Tue, 15 Apr 2025 16:56:20 +0800</pubDate><guid>https://before80.github.io/lang/c/std/threads/</guid><description>类型 cnd_t 原址： 1 typedef /* 见描述 */ cnd_t; ​ 条件变量标识符 mtx_t 原址： 1 typedef /* 见描述 */ mtx_t; ​ 互斥体标识符 thrd_start_t 原址： 1 typedef /* 见描述 */ thrd_start_t; thrd_t 原址： 1 typedef /* 见描述 */ thrd_t; tss_dtor_t 原址： 1</description></item><item><title>&lt;ctype.h></title><link>https://before80.github.io/lang/c/std/ctype/</link><pubDate>Tue, 15 Apr 2025 09:12:20 +0800</pubDate><guid>https://before80.github.io/lang/c/std/ctype/</guid><description>原文： 类型 宏 函数 isalnum 原址：https://zh.cppreference.com/w/c/string/byte/isalnum 1 int isalnum( int ch ); ​</description></item><item><title>&lt;assert.h></title><link>https://before80.github.io/lang/c/std/assert/</link><pubDate>Mon, 14 Apr 2025 23:18:36 +0800</pubDate><guid>https://before80.github.io/lang/c/std/assert/</guid><description>宏 assert 原址：https://zh.cppreference.com/w/c/error/assert 1 2 3 4 5 6 7 8 9 10 11 12 13 // (C23 前) #ifdef NDEBUG #define assert(condition)</description></item><item><title>&lt;errno.h></title><link>https://before80.github.io/lang/c/std/errno/</link><pubDate>Mon, 14 Apr 2025 23:11:56 +0800</pubDate><guid>https://before80.github.io/lang/c/std/errno/</guid><description>宏 EDOM 原址：https://zh.cppreference.com/w/c/error/errno_macros 1 #define EDOM /* 由实现定义 */ EILSEQ 原址：h</description></item><item><title>&lt;stdarg.h></title><link>https://before80.github.io/lang/c/std/stdarg/</link><pubDate>Mon, 14 Apr 2025 22:51:57 +0800</pubDate><guid>https://before80.github.io/lang/c/std/stdarg/</guid><description>原文：https://zh.cppreference.com/w/c/variadic/va_start 类型 va_list 原址：https://zh.c</description></item><item><title>&lt;setjmp.h></title><link>https://before80.github.io/lang/c/std/setjmp/</link><pubDate>Mon, 14 Apr 2025 22:34:39 +0800</pubDate><guid>https://before80.github.io/lang/c/std/setjmp/</guid><description>类型 jmp_buf 原址：https://zh.cppreference.com/w/c/program/jmp_buf 1 typedef /* 未指明 */ jmp_buf; ​ jmp_buf 类型是适合于存</description></item><item><title>&lt;signal.h></title><link>https://before80.github.io/lang/c/std/signal/</link><pubDate>Mon, 14 Apr 2025 22:17:16 +0800</pubDate><guid>https://before80.github.io/lang/c/std/signal/</guid><description>类型 sig_atomic_t 原址：https://zh.cppreference.com/w/c/program/sig_atomic_t 1 typedef /* 未指明 */ sig_atomic_t; ​ 即使在</description></item><item><title>&lt;stddef.h></title><link>https://before80.github.io/lang/c/std/stddef/</link><pubDate>Mon, 14 Apr 2025 22:03:04 +0800</pubDate><guid>https://before80.github.io/lang/c/std/stddef/</guid><description>宏 unreachable &amp;lt;- 23+ 1 #define unreachable() /* 见下文 */ (C23 起) ​ 仿函数宏 unreachable 展开成 void 表达式。执行 unreachable() 导致未定义行为。 ​ 实现可以用此宏优化掉不可能的代码分支（常于优化构建中），或</description></item><item><title>&lt;stdlib.h></title><link>https://before80.github.io/lang/c/std/stdlib/</link><pubDate>Mon, 14 Apr 2025 16:54:35 +0800</pubDate><guid>https://before80.github.io/lang/c/std/stdlib/</guid><description>类型 constraint_handler_t 1 2 3 typedef void (*constraint_handler_t)( const char *restrict msg, void *restrict ptr, errno_t error); // (2) (C11 起) ​ 参见：set_constraint_handler_s 函数 宏 EXIT_SUCCESS 原址：https://zh.c</description></item><item><title>C 的历史</title><link>https://before80.github.io/lang/c/language/misc/history/</link><pubDate>Sun, 13 Apr 2025 14:07:08 +0800</pubDate><guid>https://before80.github.io/lang/c/language/misc/history/</guid><description>原文：https://zh.cppreference.com/w/c/language/history 早期 C 1969：基于 BCPL 创建 B 语言，以替</description></item><item><title>enum</title><link>https://before80.github.io/lang/c/language/keyword/enum/</link><pubDate>Sat, 12 Apr 2025 11:02:55 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/enum/</guid><description>原文：</description></item><item><title>ASCII</title><link>https://before80.github.io/lang/base/charset/ASCII/</link><pubDate>Mon, 31 Mar 2025 17:24:53 +0800</pubDate><guid>https://before80.github.io/lang/base/charset/ASCII/</guid><description>注意 ​ UTF-8 完全兼容标准 ASCII（0-127），使用单字节表示。 ​ UTF-8 通过多字节编码（2 字节）覆盖了扩展 ASCII（128-255）的所有字符。</description></item><item><title>SSL/TLS</title><link>https://before80.github.io/lang/base/protocols/TLS/</link><pubDate>Mon, 10 Mar 2025 12:52:11 +0800</pubDate><guid>https://before80.github.io/lang/base/protocols/TLS/</guid><description>是什么？ ​ SSL/TLS（安全套接字层/传输层安全） 是一种加密协议，确保互联网上的通信安全。它保护数据免受窃听、篡改和伪造，确保通信的保密性</description></item><item><title>openssl</title><link>https://before80.github.io/lang/base/tools/openssl/</link><pubDate>Mon, 10 Mar 2025 07:22:49 +0800</pubDate><guid>https://before80.github.io/lang/base/tools/openssl/</guid><description>是什么 ​ OpenSSL 是一个 C 语言编写的开源软件库，包含对 SSL 和 TLS 协议的开源实现。它不仅是一个库，还提供命令行工具，用于执行各种加密任务，如生成密钥、证书</description></item><item><title>context</title><link>https://before80.github.io/lang/go/std/context/</link><pubDate>Fri, 28 Feb 2025 10:47:40 +0800</pubDate><guid>https://before80.github.io/lang/go/std/context/</guid><description>最新版本网址 ​ https://pkg.go.dev/context 作用 ​ context 包用于在 Goroutine 之间传递请求域数据、取消信号、超时和截止时间、其他元数据，核心功能包括： 控制并发操作：支持取消和超时控制，</description></item><item><title>原生JS操作HTML</title><link>https://before80.github.io/lang/js/frequent/ht/</link><pubDate>Thu, 27 Feb 2025 20:39:05 +0800</pubDate><guid>https://before80.github.io/lang/js/frequent/ht/</guid><description>元素获取 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // 根据元素的 id 属性值来获取单个元素。 // 返回</description></item><item><title>Gin 框架源码分析：设计思路与学习指南</title><link>https://before80.github.io/lang/go/frameworks/gin/gin_swdt/</link><pubDate>Wed, 12 Mar 2025 12:59:19 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/gin_swdt/</guid><description>Gin 框架源码分析：设计思路与学习指南 1. Gin 框架简介 Gin 是一个使用 Go (Golang) 语言编写的高性能 HTTP Web 框架 1。它以其类似 Martini 的 API 而闻名，但在性能上却有着显著的提升</description></item><item><title>Gin 框架源码仓库分析报告</title><link>https://before80.github.io/lang/go/frameworks/gin/gin_swdt2/</link><pubDate>Wed, 12 Mar 2025 12:59:19 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/gin_swdt2/</guid><description>Gin 框架源码仓库分析报告 1. Introduction to the Gin Framework Source Code Repository ​ Gin 框架，作为一个用 Go 语言编写的高性能 HTTP Web 框架，其设计灵感来源于 Martini，但在性能上实现了显著</description></item><item><title>Gin 框架知识点、设计思路与实现总结</title><link>https://before80.github.io/lang/go/frameworks/gin/gin_swdt3/</link><pubDate>Wed, 12 Mar 2025 12:59:19 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/gin_swdt3/</guid><description>Gin 框架知识点、设计思路与实现总结 1. Gin 框架简介 Gin 是一个用 Go (Golang) 编写的高性能 HTTP Web 框架 1。它的设计灵感来源于 Martini，但在性能上进行了大幅提升</description></item><item><title>动态内存扩展</title><link>https://before80.github.io/lang/c/experimental/dynamic/</link><pubDate>Tue, 15 Apr 2025 19:32:03 +0800</pubDate><guid>https://before80.github.io/lang/c/experimental/dynamic/</guid><description>原文https://zh.cppreference.com/w/c/experimental/dynamic ​ 对 C 库的扩展部分 II ：动态分配函</description></item><item><title>常用数学函数</title><link>https://before80.github.io/lang/c/numeric/math/</link><pubDate>Tue, 15 Apr 2025 18:51:00 +0800</pubDate><guid>https://before80.github.io/lang/c/numeric/math/</guid><description>原文https://zh.cppreference.com/w/c/numeric/math 类型 在标头 &amp;lt;stdlib.h&amp;gt; 定义 div_t div 函数返回的结构体类型 (typedef) ldiv_t ldiv 函</description></item><item><title>空终止字节字符串</title><link>https://before80.github.io/lang/c/string/byte/</link><pubDate>Tue, 15 Apr 2025 08:51:31 +0800</pubDate><guid>https://before80.github.io/lang/c/string/byte/</guid><description>原文：https://zh.cppreference.com/w/c/string/byte ​ 空终止字节字符串（NTBS）是非零字节的序列后</description></item><item><title>FLT_ROUNDS</title><link>https://before80.github.io/lang/c/types/limits/FLT_ROUNDS/</link><pubDate>Mon, 14 Apr 2025 16:02:23 +0800</pubDate><guid>https://before80.github.io/lang/c/types/limits/FLT_ROUNDS/</guid><description>原文：https://zh.cppreference.com/w/c/types/limits/FLT_ROUNDS 在标头 &amp;lt;float.h&amp;gt; 定义 #define FLT_ROUNDS /* 由实现</description></item><item><title>size_t</title><link>https://before80.github.io/lang/c/types/size_t/</link><pubDate>Mon, 14 Apr 2025 15:45:39 +0800</pubDate><guid>https://before80.github.io/lang/c/types/size_t/</guid><description>原文：https://zh.cppreference.com/w/c/types/size_t 在标头 &amp;lt;stddef.h&amp;gt; 定义 在标头 &amp;lt;stdio.h&amp;gt; 定义 在标头 &amp;lt;stdlib.h&amp;gt; 定义 在标头 &amp;lt;string.h&amp;gt; 定</description></item><item><title>&lt;assert.h></title><link>https://before80.github.io/lang/c/header/assert/</link><pubDate>Sun, 13 Apr 2025 21:00:15 +0800</pubDate><guid>https://before80.github.io/lang/c/header/assert/</guid><description>原文：https://zh.cppreference.com/w/c/header/assert ​ This header is part of the error handling library. 宏 assert 若用户指定的条件非t</description></item><item><title>函数声明</title><link>https://before80.github.io/lang/c/language/functions/function_declaration/</link><pubDate>Sun, 13 Apr 2025 13:49:57 +0800</pubDate><guid>https://before80.github.io/lang/c/language/functions/function_declaration/</guid><description>原文：https://zh.cppreference.com/w/c/language/function_declaration ​ 函数声明引</description></item><item><title>C 属性： deprecated (C23 起)</title><link>https://before80.github.io/lang/c/language/declarations/attributes/deprecated/</link><pubDate>Sun, 13 Apr 2025 11:18:26 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/attributes/deprecated/</guid><description>原文：https://zh.cppreference.com/w/c/language/attributes/deprecated ​ 指示声明</description></item><item><title>指针声明</title><link>https://before80.github.io/lang/c/language/declarations/pointer/</link><pubDate>Sun, 13 Apr 2025 10:15:28 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/pointer/</guid><description>原文：https://zh.cppreference.com/w/c/language/pointer ​ 指针是一种对象类型，它引用函数或另一</description></item><item><title>标量初始化</title><link>https://before80.github.io/lang/c/language/initialization/scalar_initialization/</link><pubDate>Sun, 13 Apr 2025 09:54:34 +0800</pubDate><guid>https://before80.github.io/lang/c/language/initialization/scalar_initialization/</guid><description>原文：https://zh.cppreference.com/w/c/language/scalar_initialization ​ 在初始化</description></item><item><title>值类别</title><link>https://before80.github.io/lang/c/language/expressions/value_category/</link><pubDate>Sat, 12 Apr 2025 16:42:20 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/value_category/</guid><description>原文：https://zh.cppreference.com/w/c/language/value_category ​ C 中每个表达式（带有实</description></item><item><title>条件包含</title><link>https://before80.github.io/lang/c/language/preprocessor/conditional/</link><pubDate>Sat, 12 Apr 2025 11:58:52 +0800</pubDate><guid>https://before80.github.io/lang/c/language/preprocessor/conditional/</guid><description>原文：https://zh.cppreference.com/w/c/preprocessor/conditional ​ 预处理器支持有条件地</description></item><item><title>alignas</title><link>https://before80.github.io/lang/c/language/keyword/alignas/</link><pubDate>Sat, 12 Apr 2025 10:53:18 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/alignas/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/alignas 用法 alignas 对齐指定符 (C23 起)</description></item><item><title>注释</title><link>https://before80.github.io/lang/c/language/basic_concepts/comment/</link><pubDate>Fri, 11 Apr 2025 19:34:57 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/comment/</guid><description>原文：https://zh.cppreference.com/w/c/comment ​ 注释的作用是一套代码内文档。插入注释到程序中时，编译器</description></item><item><title>AsciiJSON</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/AsciiJSON/</link><pubDate>Tue, 18 Mar 2025 17:00:10 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/AsciiJSON/</guid><description>原文：https://gin-gonic.com/docs/examples/ascii-json/ 源码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description></item><item><title>数组 array</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/array/</link><pubDate>Mon, 17 Feb 2025 12:07:53 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/array/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>类型</title><link>https://before80.github.io/lang/docs/basic/syntax/types/</link><pubDate>Mon, 17 Feb 2025 12:00:34 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/types/</guid><description>Go 以下是 Go 语言的详细类型分类，包括内置类型、复合类型和自定义类型。每个类型都提供了详细说明，包括类型名、默认值、示例、字节长度、最大值、最小</description></item><item><title>介绍</title><link>https://before80.github.io/lang/docs/basic/intro/</link><pubDate>Mon, 17 Feb 2025 11:55:52 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/intro/</guid><description>Go 以下是对Go语言的全面介绍，结合其历史发展、核心特性、设计哲学及典型应用场景： 一、Go语言历史 1. 诞生背景 时间线：2007年由Google工</description></item><item><title>keywords</title><link>https://before80.github.io/lang/docs/basic/syntax/keywords/</link><pubDate>Tue, 18 Feb 2025 11:44:40 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/keywords/</guid><description>给出xxx语言的关键字、软关键字（若有）、保留字（若有），先在二级菜单（菜单名称为：所有关键字）下在表格中按类别给出关键字、每个类别的关键字</description></item><item><title>浮点扩展部分 1 ：二进制浮点算术</title><link>https://before80.github.io/lang/c/experimental/fpext1/</link><pubDate>Tue, 15 Apr 2025 19:33:25 +0800</pubDate><guid>https://before80.github.io/lang/c/experimental/fpext1/</guid><description>原文https://zh.cppreference.com/w/c/experimental/fpext1 并入 ISO C 此页面上描述的已从 2019 年 3 月</description></item><item><title>浮点数环境</title><link>https://before80.github.io/lang/c/numeric/fenv/</link><pubDate>Tue, 15 Apr 2025 19:07:04 +0800</pubDate><guid>https://before80.github.io/lang/c/numeric/fenv/</guid><description>原文https://zh.cppreference.com/w/c/numeric/fenv ​ 浮点数环境是浮点数状态标志及实现所支持的控制模</description></item><item><title>空终止多字节字符串</title><link>https://before80.github.io/lang/c/string/multibyte/</link><pubDate>Tue, 15 Apr 2025 09:02:04 +0800</pubDate><guid>https://before80.github.io/lang/c/string/multibyte/</guid><description>原文：https://zh.cppreference.com/w/c/string/multibyte ​ 空终止多字节字符串（NTMBS），或</description></item><item><title>FLT_EVAL_METHOD</title><link>https://before80.github.io/lang/c/types/limits/FLT_EVAL_METHOD/</link><pubDate>Mon, 14 Apr 2025 16:03:32 +0800</pubDate><guid>https://before80.github.io/lang/c/types/limits/FLT_EVAL_METHOD/</guid><description>原文：https://zh.cppreference.com/w/c/types/limits/FLT_EVAL_METHOD 在标头 &amp;lt;float.h&amp;gt; 定义 #define</description></item><item><title>ptrdiff_t</title><link>https://before80.github.io/lang/c/types/ptrdiff_t/</link><pubDate>Mon, 14 Apr 2025 15:48:12 +0800</pubDate><guid>https://before80.github.io/lang/c/types/ptrdiff_t/</guid><description>原文：https://zh.cppreference.com/w/c/types/ptrdiff_t 在标头 &amp;lt;stddef.h&amp;gt; 定义 ​ typedef /* 由实现定义 */ ptrdiff_t; ​ ptrdiff_t 是二</description></item><item><title>&lt;complex.h></title><link>https://before80.github.io/lang/c/header/complex/</link><pubDate>Sun, 13 Apr 2025 21:16:17 +0800</pubDate><guid>https://before80.github.io/lang/c/header/complex/</guid><description>原文：https://zh.cppreference.com/w/c/header/complex ​ 此标头是复数算术库的一部分。 类型 imaginary (C99) 虚数</description></item><item><title>遵从性</title><link>https://before80.github.io/lang/c/language/misc/conformance/</link><pubDate>Sun, 13 Apr 2025 14:17:12 +0800</pubDate><guid>https://before80.github.io/lang/c/language/misc/conformance/</guid><description>原文：https://zh.cppreference.com/w/c/language/conformance ​ 遵从性 (conformance) 有三重定义： 严格遵从</description></item><item><title>函数定义</title><link>https://before80.github.io/lang/c/language/functions/function_definition/</link><pubDate>Sun, 13 Apr 2025 13:53:32 +0800</pubDate><guid>https://before80.github.io/lang/c/language/functions/function_definition/</guid><description>原文：https://zh.cppreference.com/w/c/language/function_definition ​ 函数定义将函</description></item><item><title>C 属性： fallthrough (C23 起)</title><link>https://before80.github.io/lang/c/language/declarations/attributes/fallthrough/</link><pubDate>Sun, 13 Apr 2025 11:20:31 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/attributes/fallthrough/</guid><description>原文：https://zh.cppreference.com/w/c/language/attributes/fallthrough ​ 指示从</description></item><item><title>数组声明</title><link>https://before80.github.io/lang/c/language/declarations/array/</link><pubDate>Sun, 13 Apr 2025 10:18:09 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/array/</guid><description>原文：https://zh.cppreference.com/w/c/language/array ​ 数组是由连续无空隙分配的，拥有特定元素类</description></item><item><title>数组初始化</title><link>https://before80.github.io/lang/c/language/initialization/array_initialization/</link><pubDate>Sun, 13 Apr 2025 09:57:13 +0800</pubDate><guid>https://before80.github.io/lang/c/language/initialization/array_initialization/</guid><description>原文：https://zh.cppreference.com/w/c/language/array_initialization ​ 初始化数组</description></item><item><title>if 语句</title><link>https://before80.github.io/lang/c/language/statements/if/</link><pubDate>Sat, 12 Apr 2025 15:09:01 +0800</pubDate><guid>https://before80.github.io/lang/c/language/statements/if/</guid><description>原文：https://zh.cppreference.com/w/c/language/if ​ 有条件地执行代码。 ​ 用于仅若某条件为真才执行代</description></item><item><title>替换文本宏</title><link>https://before80.github.io/lang/c/language/preprocessor/replace/</link><pubDate>Sat, 12 Apr 2025 12:05:04 +0800</pubDate><guid>https://before80.github.io/lang/c/language/preprocessor/replace/</guid><description>原文：https://zh.cppreference.com/w/c/preprocessor/replace ​ 预处理器支持文本宏替换及类函</description></item><item><title>alignof</title><link>https://before80.github.io/lang/c/language/keyword/alignof/</link><pubDate>Sat, 12 Apr 2025 10:54:06 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/alignof/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/alignof 用法 alignof 运算符 (C23 起)</description></item><item><title>ASCII 码表</title><link>https://before80.github.io/lang/c/language/basic_concepts/ascii/</link><pubDate>Fri, 11 Apr 2025 19:44:39 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/ascii/</guid><description>原文：https://zh.cppreference.com/w/c/language/ascii ​ 下表包含所有 128 个 ASCII 码对应的十进制 (dec) 、八进</description></item><item><title>Bind form-data request with custom struct</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindForm-dataRequestWithCustomStruct/</link><pubDate>Tue, 18 Mar 2025 17:00:30 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindForm-dataRequestWithCustomStruct/</guid><description>原文：https://gin-gonic.com/docs/examples/bind-form-data-request-with-cus</description></item><item><title>列表 list</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/list/</link><pubDate>Mon, 17 Feb 2025 12:06:46 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/list/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>变量</title><link>https://before80.github.io/lang/docs/basic/syntax/variable/</link><pubDate>Mon, 17 Feb 2025 11:58:39 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/variable/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>安装</title><link>https://before80.github.io/lang/docs/basic/install/</link><pubDate>Mon, 17 Feb 2025 11:55:36 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/install/</guid><description>Go 以下是针对多种操作系统安装最新版Go、配置环境变量及管理多版本的详细指南： 一、通用步骤：安装最新版Go 1. 下载并安装Go 访问 Go官方下载页面</description></item><item><title>fpext4</title><link>https://before80.github.io/lang/c/experimental/fpext4/</link><pubDate>Tue, 15 Apr 2025 19:36:10 +0800</pubDate><guid>https://before80.github.io/lang/c/experimental/fpext4/</guid><description>原文https://zh.cppreference.com/w/c/experimental/fpext4 ​ C 浮点扩展 - 部分 4 ：补充函数， ISO/IEC</description></item><item><title>伪随机数生成</title><link>https://before80.github.io/lang/c/numeric/random/</link><pubDate>Tue, 15 Apr 2025 19:08:22 +0800</pubDate><guid>https://before80.github.io/lang/c/numeric/random/</guid><description>原文https://zh.cppreference.com/w/c/numeric/random 在标头 &amp;lt;stdlib.h&amp;gt; 定义 rand 产生一个伪随机数 (函数) srand 播种</description></item><item><title>空终止宽字符串</title><link>https://before80.github.io/lang/c/string/wide/</link><pubDate>Tue, 15 Apr 2025 09:04:22 +0800</pubDate><guid>https://before80.github.io/lang/c/string/wide/</guid><description>原文：https://zh.cppreference.com/w/c/string/wide ​ 空终止宽字符串（NTWS）是以空字符为结尾的合</description></item><item><title>nullptr_t</title><link>https://before80.github.io/lang/c/types/nullptr_t/</link><pubDate>Mon, 14 Apr 2025 15:50:16 +0800</pubDate><guid>https://before80.github.io/lang/c/types/nullptr_t/</guid><description>原文：https://zh.cppreference.com/w/c/types/nullptr_t 在标头 &amp;lt;stddef.h&amp;gt; 定义 typedef typeof(nullptr) nullptr_t; (C23 起) ​ nullptr_t 是预定义空指</description></item><item><title>&lt;ctype.h></title><link>https://before80.github.io/lang/c/header/ctype/</link><pubDate>Mon, 14 Apr 2025 09:37:34 +0800</pubDate><guid>https://before80.github.io/lang/c/header/ctype/</guid><description>原文：https://zh.cppreference.com/w/c/header/ctype ​ 此标头是空终结字节字符串库的一部分。 Functions isalnum 检查</description></item><item><title>内联汇编</title><link>https://before80.github.io/lang/c/language/misc/asm/</link><pubDate>Sun, 13 Apr 2025 14:29:28 +0800</pubDate><guid>https://before80.github.io/lang/c/language/misc/asm/</guid><description>原文：https://zh.cppreference.com/w/c/language/asm ​ 内联汇编（常由 asm 关键词引入）给予在 C 程序中嵌</description></item><item><title>可变函数</title><link>https://before80.github.io/lang/c/language/functions/variadic/</link><pubDate>Sun, 13 Apr 2025 13:57:02 +0800</pubDate><guid>https://before80.github.io/lang/c/language/functions/variadic/</guid><description>原文：https://zh.cppreference.com/w/c/language/variadic ​ 变参函数是能以不同数目实参调用的函</description></item><item><title>C 属性： nodiscard (C23 起)</title><link>https://before80.github.io/lang/c/language/declarations/attributes/nodiscard/</link><pubDate>Sun, 13 Apr 2025 11:22:38 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/attributes/nodiscard/</guid><description>原文：https://zh.cppreference.com/w/c/language/attributes/nodiscard ​ 若从转型到</description></item><item><title>枚举</title><link>https://before80.github.io/lang/c/language/declarations/enum/</link><pubDate>Sun, 13 Apr 2025 10:27:54 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/enum/</guid><description>原文：https://zh.cppreference.com/w/c/language/enum ​ 枚举类型 ﻿是独立的类型，其值为包含所有其显</description></item><item><title>结构体与联合体初始化</title><link>https://before80.github.io/lang/c/language/initialization/struct_initialization/</link><pubDate>Sun, 13 Apr 2025 10:01:21 +0800</pubDate><guid>https://before80.github.io/lang/c/language/initialization/struct_initialization/</guid><description>原文：https://zh.cppreference.com/w/c/language/struct_initialization ​ 初始化结</description></item><item><title>求值顺序</title><link>https://before80.github.io/lang/c/language/expressions/eval_order/</link><pubDate>Sat, 12 Apr 2025 16:45:19 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/eval_order/</guid><description>原文：https://zh.cppreference.com/w/c/language/eval_order ​ 除下列标出者，任意 C 运算符的运</description></item><item><title>switch 语句</title><link>https://before80.github.io/lang/c/language/statements/switch/</link><pubDate>Sat, 12 Apr 2025 15:11:50 +0800</pubDate><guid>https://before80.github.io/lang/c/language/statements/switch/</guid><description>原文：https://zh.cppreference.com/w/c/language/switch ​ 按照整数实参的值执行代码。 ​ 在需要按照</description></item><item><title>源文件包含</title><link>https://before80.github.io/lang/c/language/preprocessor/include/</link><pubDate>Sat, 12 Apr 2025 12:19:16 +0800</pubDate><guid>https://before80.github.io/lang/c/language/preprocessor/include/</guid><description>原文：https://zh.cppreference.com/w/c/preprocessor/include ​ 包含另一源文件，到当前源文件</description></item><item><title>auto</title><link>https://before80.github.io/lang/c/language/keyword/auto/</link><pubDate>Sat, 12 Apr 2025 10:55:18 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/auto/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/auto 用法 无链接的自动存储期类限定符。 类型推断 (C23 起)</description></item><item><title>字符集与编码</title><link>https://before80.github.io/lang/c/language/basic_concepts/charset/</link><pubDate>Fri, 11 Apr 2025 19:50:37 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/charset/</guid><description>原文：https://zh.cppreference.com/w/c/language/charset 基本字符集 ​ “基本字符集”由如下95个</description></item><item><title>Bind html checkboxes</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindHtmlCheckboxes/</link><pubDate>Tue, 18 Mar 2025 17:00:32 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindHtmlCheckboxes/</guid><description>原文：https://gin-gonic.com/docs/examples/bind-html-checkbox/ 源码 1 2 3 4 5 6 7 8 9 10</description></item><item><title>切片 slice</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/slice/</link><pubDate>Mon, 17 Feb 2025 12:07:35 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/slice/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>常量</title><link>https://before80.github.io/lang/docs/basic/syntax/contant/</link><pubDate>Mon, 17 Feb 2025 11:58:50 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/contant/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>复数算术</title><link>https://before80.github.io/lang/c/numeric/complex/</link><pubDate>Tue, 15 Apr 2025 19:09:21 +0800</pubDate><guid>https://before80.github.io/lang/c/numeric/complex/</guid><description>原文https://zh.cppreference.com/w/c/numeric/complex ​ 若实现定义了宏常量 __STDC_NO_C</description></item><item><title>NULL</title><link>https://before80.github.io/lang/c/types/NULL/</link><pubDate>Mon, 14 Apr 2025 15:52:10 +0800</pubDate><guid>https://before80.github.io/lang/c/types/NULL/</guid><description>原文：https://zh.cppreference.com/w/c/types/NULL 在标头 &amp;lt;locale.h&amp;gt; 定义 在标头 &amp;lt;stddef.h&amp;gt; 定义 在标头 &amp;lt;stdio.h&amp;gt; 定义 在标头 &amp;lt;stdlib.h&amp;gt; 定义 在</description></item><item><title>&lt;errno.h></title><link>https://before80.github.io/lang/c/header/errno/</link><pubDate>Mon, 14 Apr 2025 09:38:27 +0800</pubDate><guid>https://before80.github.io/lang/c/header/errno/</guid><description>原文：https://zh.cppreference.com/w/c/header/errno ​ 此标头是错误处理库的一部分。 错误号码 errno 展开成</description></item><item><title>`inline` 函数说明符</title><link>https://before80.github.io/lang/c/language/functions/inline/</link><pubDate>Sun, 13 Apr 2025 13:59:19 +0800</pubDate><guid>https://before80.github.io/lang/c/language/functions/inline/</guid><description>原文：https://zh.cppreference.com/w/c/language/inline 声明内联函数。 语法 inline 函数声明 (C99 起) 解释 ​</description></item><item><title>C 属性： maybe_unused (C23 起)</title><link>https://before80.github.io/lang/c/language/declarations/attributes/maybe_unused/</link><pubDate>Sun, 13 Apr 2025 11:24:16 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/attributes/maybe_unused/</guid><description>原文：https://zh.cppreference.com/w/c/language/attributes/maybe_unused ​ 抑制</description></item><item><title>结构体声明</title><link>https://before80.github.io/lang/c/language/declarations/struct/</link><pubDate>Sun, 13 Apr 2025 10:31:52 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/struct/</guid><description>原文：https://zh.cppreference.com/w/c/language/struct ​ 结构体是一种由一序列的成员组成的类型，</description></item><item><title>常量表达式</title><link>https://before80.github.io/lang/c/language/expressions/constant_expression/</link><pubDate>Sat, 12 Apr 2025 16:49:42 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/constant_expression/</guid><description>原文：https://zh.cppreference.com/w/c/language/constant_expression ​ 表达式的数种</description></item><item><title>while 循环</title><link>https://before80.github.io/lang/c/language/statements/while/</link><pubDate>Sat, 12 Apr 2025 16:10:45 +0800</pubDate><guid>https://before80.github.io/lang/c/language/statements/while/</guid><description>原文：https://zh.cppreference.com/w/c/language/while ​ 重复执行 语句，直到 表达式 的值变得比较等于</description></item><item><title>诊断指令</title><link>https://before80.github.io/lang/c/language/preprocessor/error/</link><pubDate>Sat, 12 Apr 2025 12:24:54 +0800</pubDate><guid>https://before80.github.io/lang/c/language/preprocessor/error/</guid><description>原文：https://zh.cppreference.com/w/c/preprocessor/error ​ 显示给定的错误消息并使得程序非良</description></item><item><title>bool</title><link>https://before80.github.io/lang/c/language/keyword/bool/</link><pubDate>Sat, 12 Apr 2025 10:55:55 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/bool/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/bool 用法 布尔类型：用作该类型声明 (C23 起)</description></item><item><title>标点</title><link>https://before80.github.io/lang/c/language/basic_concepts/punctuators/</link><pubDate>Fri, 11 Apr 2025 19:57:43 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/punctuators/</guid><description>原文：https://zh.cppreference.com/w/c/language/punctuators ​ 这些是 C 中的标点符号。每个符</description></item><item><title>BindQueryStringOrPostData</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindQueryStringOrPostData/</link><pubDate>Tue, 18 Mar 2025 17:00:34 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindQueryStringOrPostData/</guid><description>原文：https://gin-gonic.com/docs/examples/bind-query-or-post/ 源码 测试</description></item><item><title>字典 dict（or 映射 map）</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/mapordict/</link><pubDate>Mon, 17 Feb 2025 12:09:25 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/mapordict/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>逻辑结构</title><link>https://before80.github.io/lang/docs/basic/syntax/if/</link><pubDate>Mon, 17 Feb 2025 12:00:07 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/if/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>UsingBasicAuthMiddleware</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UsingBasicAuthMiddleware/</link><pubDate>Tue, 18 Mar 2025 17:01:45 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UsingBasicAuthMiddleware/</guid><description>原文： 源码 测试</description></item><item><title>泛型数学 (C99 起)</title><link>https://before80.github.io/lang/c/numeric/tgmath/</link><pubDate>Tue, 15 Apr 2025 19:15:10 +0800</pubDate><guid>https://before80.github.io/lang/c/numeric/tgmath/</guid><description>原文https://zh.cppreference.com/w/c/numeric/tgmath ​ 头文件 &amp;lt;tgmath.h&amp;gt; 包含头文件 &amp;lt;math.h&amp;gt; 及 &amp;lt;comple</description></item><item><title>max_align_t</title><link>https://before80.github.io/lang/c/types/max_align_t/</link><pubDate>Mon, 14 Apr 2025 15:53:41 +0800</pubDate><guid>https://before80.github.io/lang/c/types/max_align_t/</guid><description>原文：https://zh.cppreference.com/w/c/types/max_align_t 在标头 &amp;lt;stddef.h&amp;gt; 定义 typedef /* 由实现定义 */ max_align_t; (C11 起)</description></item><item><title>可分析性</title><link>https://before80.github.io/lang/c/language/misc/analyzability/</link><pubDate>Sun, 13 Apr 2025 14:44:02 +0800</pubDate><guid>https://before80.github.io/lang/c/language/misc/analyzability/</guid><description>原文：https://zh.cppreference.com/w/c/language/analyzability ​ C 语言的此扩展限制某些未</description></item><item><title>_Noreturn 函数说明符 (C11 起)(C23 弃用)</title><link>https://before80.github.io/lang/c/language/functions/_Noreturn/</link><pubDate>Sun, 13 Apr 2025 14:02:22 +0800</pubDate><guid>https://before80.github.io/lang/c/language/functions/_Noreturn/</guid><description>原文：https://zh.cppreference.com/w/c/language/_Noreturn ​ 指明函数不会返回到其调用点。 语法</description></item><item><title>C 属性： noreturn, _Noreturn (C23 起)</title><link>https://before80.github.io/lang/c/language/declarations/attributes/noreturn/</link><pubDate>Sun, 13 Apr 2025 11:26:00 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/attributes/noreturn/</guid><description>原文：https://zh.cppreference.com/w/c/language/attributes/noreturn ​ 指示函数不会</description></item><item><title>联合体声明</title><link>https://before80.github.io/lang/c/language/declarations/union/</link><pubDate>Sun, 13 Apr 2025 10:36:01 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/union/</guid><description>原文：https://zh.cppreference.com/w/c/language/union ​ 联合体是由一序列的成员所组成的类型，各成</description></item><item><title>隐式转换</title><link>https://before80.github.io/lang/c/language/expressions/conversion/</link><pubDate>Sat, 12 Apr 2025 16:57:45 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/conversion/</guid><description>原文：https://zh.cppreference.com/w/c/language/conversion ​ 当表达式用在期待相异类型的值语</description></item><item><title>do-while 循环</title><link>https://before80.github.io/lang/c/language/statements/do/</link><pubDate>Sat, 12 Apr 2025 16:13:15 +0800</pubDate><guid>https://before80.github.io/lang/c/language/statements/do/</guid><description>原文：https://zh.cppreference.com/w/c/language/do ​ 重复执行 语句 ，直到条件 表达式 的值变为假。此测试</description></item><item><title>实现定义的行为控制</title><link>https://before80.github.io/lang/c/language/preprocessor/impl/</link><pubDate>Sat, 12 Apr 2025 12:26:40 +0800</pubDate><guid>https://before80.github.io/lang/c/language/preprocessor/impl/</guid><description>原文：https://zh.cppreference.com/w/cpp/preprocessor/impl ​ 实现定义的行为受 #pragma 指令控制。 语</description></item><item><title>break</title><link>https://before80.github.io/lang/c/language/keyword/break/</link><pubDate>Sat, 12 Apr 2025 10:56:33 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/break/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/break 用法 break 语句：用作该语句的声明</description></item><item><title>标识符</title><link>https://before80.github.io/lang/c/language/basic_concepts/identifier/</link><pubDate>Fri, 11 Apr 2025 20:03:25 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/identifier/</guid><description>原文：https://zh.cppreference.com/w/c/language/identifier ​ 标识符是数字、下划线、小写及大</description></item><item><title>BindUri</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindUri/</link><pubDate>Tue, 18 Mar 2025 17:00:36 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindUri/</guid><description>原文： 源码 测试</description></item><item><title>元组 tuple</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/tuple/</link><pubDate>Mon, 17 Feb 2025 12:07:27 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/tuple/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>循环结构</title><link>https://before80.github.io/lang/docs/basic/syntax/for/</link><pubDate>Mon, 17 Feb 2025 12:00:13 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/for/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>offsetof</title><link>https://before80.github.io/lang/c/types/offsetof/</link><pubDate>Mon, 14 Apr 2025 15:54:58 +0800</pubDate><guid>https://before80.github.io/lang/c/types/offsetof/</guid><description>原文：https://zh.cppreference.com/w/c/types/offsetof 在标头 &amp;lt;stddef.h&amp;gt; 定义 #define offsetof(type, member) /* 由实现定义 */ ​ 宏 offsetof 展开</description></item><item><title>&lt;fenv.h></title><link>https://before80.github.io/lang/c/header/fenv/</link><pubDate>Mon, 14 Apr 2025 09:39:26 +0800</pubDate><guid>https://before80.github.io/lang/c/header/fenv/</guid><description>原文：https://zh.cppreference.com/w/c/header/fenv ​ 此标头是浮点数环境库的一部分。 类型 在标头 &amp;lt;fenv.h&amp;gt; 定义</description></item><item><title>C 属性： unsequenced, reproducible (C23 起)</title><link>https://before80.github.io/lang/c/language/declarations/attributes/unsequenced/</link><pubDate>Sun, 13 Apr 2025 11:27:37 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/attributes/unsequenced/</guid><description>原文：https://zh.cppreference.com/w/c/language/attributes/unsequenced 向编译器</description></item><item><title>位域</title><link>https://before80.github.io/lang/c/language/declarations/bit_field/</link><pubDate>Sun, 13 Apr 2025 10:38:10 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/bit_field/</guid><description>原文：https://zh.cppreference.com/w/c/language/bit_field ​ 声明带有明确宽度的成员，按位数计</description></item><item><title>泛型选择 (C11 起)</title><link>https://before80.github.io/lang/c/language/expressions/generic/</link><pubDate>Sat, 12 Apr 2025 17:18:41 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/generic/</guid><description>原文：https://zh.cppreference.com/w/c/language/generic ​ 提供一种方式，基于控制表达式的类型，</description></item><item><title>for 循环</title><link>https://before80.github.io/lang/c/language/statements/for/</link><pubDate>Sat, 12 Apr 2025 16:18:29 +0800</pubDate><guid>https://before80.github.io/lang/c/language/statements/for/</guid><description>原文：https://zh.cppreference.com/w/c/language/for 执行循环。 用作 while 循环的简短等价版本。 语法 ​ 属性</description></item><item><title>文件名和行信息</title><link>https://before80.github.io/lang/c/language/preprocessor/line/</link><pubDate>Sat, 12 Apr 2025 14:28:00 +0800</pubDate><guid>https://before80.github.io/lang/c/language/preprocessor/line/</guid><description>原文：https://zh.cppreference.com/w/c/preprocessor/line ​ 在预处理器中更改当前行号和文件名。</description></item><item><title>case</title><link>https://before80.github.io/lang/c/language/keyword/case/</link><pubDate>Sat, 12 Apr 2025 10:57:01 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/case/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/case 用法 switch 语句：用作 case 标签的声明</description></item><item><title>作用域</title><link>https://before80.github.io/lang/c/language/basic_concepts/scope/</link><pubDate>Fri, 11 Apr 2025 20:18:56 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/scope/</guid><description>原文：https://zh.cppreference.com/w/c/language/scope ​ C 程序中出现的每个标识符都仅在一些可能不</description></item><item><title>BuildASingleBinaryWithTemplates</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BuildASingleBinaryWithTemplates/</link><pubDate>Tue, 18 Mar 2025 17:00:38 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BuildASingleBinaryWithTemplates/</guid><description>原文： 源码 测试</description></item><item><title>字符串 string</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/string/</link><pubDate>Mon, 17 Feb 2025 12:10:19 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/string/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>函数</title><link>https://before80.github.io/lang/docs/basic/syntax/function/</link><pubDate>Mon, 17 Feb 2025 11:59:04 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/function/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>&lt;float.h></title><link>https://before80.github.io/lang/c/header/float/</link><pubDate>Mon, 14 Apr 2025 09:55:00 +0800</pubDate><guid>https://before80.github.io/lang/c/header/float/</guid><description>原文：https://zh.cppreference.com/w/c/header/float ​ 此标头是类型支持库的一部分，特别是其数值极限</description></item><item><title>原子类型</title><link>https://before80.github.io/lang/c/language/declarations/atomic/</link><pubDate>Sun, 13 Apr 2025 10:45:05 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/atomic/</guid><description>原文：https://zh.cppreference.com/w/c/language/atomic 语法 _Atomic ( 类型名 ) (1) (C11 起) _Atomic 类型名 (2) (C11 起)</description></item><item><title>整数常量</title><link>https://before80.github.io/lang/c/language/expressions/integer_constant/</link><pubDate>Sat, 12 Apr 2025 19:48:58 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/integer_constant/</guid><description>原文：https://zh.cppreference.com/w/c/language/integer_constant ​ 允许整数类型的值直</description></item><item><title>break 语句</title><link>https://before80.github.io/lang/c/language/statements/break/</link><pubDate>Sat, 12 Apr 2025 16:21:52 +0800</pubDate><guid>https://before80.github.io/lang/c/language/statements/break/</guid><description>原文：https://zh.cppreference.com/w/c/language/break ​ 导致外围 for、while 或 do-while 循环或 switch 语</description></item><item><title>二进制资源包含</title><link>https://before80.github.io/lang/c/language/preprocessor/embed/</link><pubDate>Sat, 12 Apr 2025 14:34:44 +0800</pubDate><guid>https://before80.github.io/lang/c/language/preprocessor/embed/</guid><description>原文：https://zh.cppreference.com/w/c/preprocessor/embed ​ #embed 是用于在构建中包含（二进制）资</description></item><item><title>char</title><link>https://before80.github.io/lang/c/language/keyword/char/</link><pubDate>Sat, 12 Apr 2025 10:57:33 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/char/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/char 用法 字符类型（ char 、 signed char 以及 unsigned char ）的类型指定符</description></item><item><title>生存期</title><link>https://before80.github.io/lang/c/language/basic_concepts/lifetime/</link><pubDate>Fri, 11 Apr 2025 20:22:45 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/lifetime/</guid><description>原文：https://zh.cppreference.com/w/c/language/lifetime ​ C 中每个对象存在、拥有常地址、保有</description></item><item><title>ControllingLogOutputColoring</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ControllingLogOutputColoring/</link><pubDate>Tue, 18 Mar 2025 17:00:40 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ControllingLogOutputColoring/</guid><description>原文： 源码 测试</description></item><item><title>集合 set</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/set/</link><pubDate>Mon, 17 Feb 2025 12:10:08 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/set/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>类</title><link>https://before80.github.io/lang/docs/basic/syntax/class/</link><pubDate>Mon, 17 Feb 2025 11:59:14 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/class/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>定宽整数类型 (C99 起)</title><link>https://before80.github.io/lang/c/types/integer/</link><pubDate>Mon, 14 Apr 2025 16:05:07 +0800</pubDate><guid>https://before80.github.io/lang/c/types/integer/</guid><description>原文：https://zh.cppreference.com/w/c/types/integer 类型 在标头 &amp;lt;stdint.h&amp;gt; 定义 int8_t int16_t int32_t int64_t 分别是宽度正好是 8、</description></item><item><title>&lt;inttypes.h></title><link>https://before80.github.io/lang/c/header/inttypes/</link><pubDate>Mon, 14 Apr 2025 09:58:11 +0800</pubDate><guid>https://before80.github.io/lang/c/header/inttypes/</guid><description>原文：https://zh.cppreference.com/w/c/header/inttypes ​ 此标头是类型支持库的一部分，特别是，它</description></item><item><title>const 类型限定符</title><link>https://before80.github.io/lang/c/language/declarations/const/</link><pubDate>Sun, 13 Apr 2025 10:48:11 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/const/</guid><description>原文：https://zh.cppreference.com/w/c/language/const ​ C 类型系统中每一个独立的类型，都有该类型</description></item><item><title>浮点数常量</title><link>https://before80.github.io/lang/c/language/expressions/floating_constant/</link><pubDate>Sat, 12 Apr 2025 20:00:46 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/floating_constant/</guid><description>原文：https://zh.cppreference.com/w/c/language/floating_constant ​ 允许直接在表达式</description></item><item><title>continue 语句</title><link>https://before80.github.io/lang/c/language/statements/continue/</link><pubDate>Sat, 12 Apr 2025 16:24:17 +0800</pubDate><guid>https://before80.github.io/lang/c/language/statements/continue/</guid><description>原文：https://zh.cppreference.com/w/c/language/continue ​ 导致跳过整个 for、 while 或 do-while 循环体的</description></item><item><title>const</title><link>https://before80.github.io/lang/c/language/keyword/const/</link><pubDate>Sat, 12 Apr 2025 10:58:07 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/const/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/const 用法 const 类型限定符</description></item><item><title>查找与命名空间</title><link>https://before80.github.io/lang/c/language/basic_concepts/name_space/</link><pubDate>Fri, 11 Apr 2025 20:24:38 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/name_space/</guid><description>原文：https://zh.cppreference.com/w/c/language/name_space ​ 在 C 程序中遇到标识符时，会查找</description></item><item><title>Cookie</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/Cookie/</link><pubDate>Tue, 18 Mar 2025 17:00:42 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/Cookie/</guid><description>原文： 源码 测试</description></item><item><title>&lt;iso646.h></title><link>https://before80.github.io/lang/c/header/iso646/</link><pubDate>Mon, 14 Apr 2025 09:59:14 +0800</pubDate><guid>https://before80.github.io/lang/c/header/iso646/</guid><description>原文：https://zh.cppreference.com/w/c/header/iso646 ​ 此标头定义代用运算符拼写宏。 概要 1 2 3 4 5</description></item><item><title>volatile 类型限定符</title><link>https://before80.github.io/lang/c/language/declarations/volatile/</link><pubDate>Sun, 13 Apr 2025 10:51:51 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/volatile/</guid><description>原文：https://zh.cppreference.com/w/c/language/volatile ​ C 类型系统中每一个独立的类型都有数</description></item><item><title>字符常量</title><link>https://before80.github.io/lang/c/language/expressions/character_constant/</link><pubDate>Sat, 12 Apr 2025 20:13:22 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/character_constant/</guid><description>原文：https://zh.cppreference.com/w/c/language/character_constant 语法 'c-字符 '</description></item><item><title>return 语句</title><link>https://before80.github.io/lang/c/language/statements/return/</link><pubDate>Sat, 12 Apr 2025 16:25:49 +0800</pubDate><guid>https://before80.github.io/lang/c/language/statements/return/</guid><description>原文：https://zh.cppreference.com/w/c/language/return ​ 终止当前函数并返回指定值给调用方函数。</description></item><item><title>constexpr</title><link>https://before80.github.io/lang/c/language/keyword/constexpr/</link><pubDate>Sat, 12 Apr 2025 10:59:11 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/constexpr/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/constexpr 用法 constexpr 说明符 (C23 起)</description></item><item><title>类型</title><link>https://before80.github.io/lang/c/language/basic_concepts/type/</link><pubDate>Fri, 11 Apr 2025 20:28:11 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/type/</guid><description>原文：https://zh.cppreference.com/w/c/language/type （内建类型上的更多细节参阅算术类型和 C 库所提</description></item><item><title>&lt;limits.h></title><link>https://before80.github.io/lang/c/header/limits/</link><pubDate>Mon, 14 Apr 2025 10:01:14 +0800</pubDate><guid>https://before80.github.io/lang/c/header/limits/</guid><description>原文：https://zh.cppreference.com/w/c/header/limits ​ 此标头是类型支持库的一部分，特别是，它是 C</description></item><item><title>restrict 类型限定符 (C99 起)</title><link>https://before80.github.io/lang/c/language/declarations/restrict/</link><pubDate>Sun, 13 Apr 2025 10:55:35 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/restrict/</guid><description>原文：https://zh.cppreference.com/w/c/language/restrict ​ C 类型系统中每一个独立的类型都有数</description></item><item><title>预定义布尔常量</title><link>https://before80.github.io/lang/c/language/expressions/bool_constant/</link><pubDate>Sat, 12 Apr 2025 20:23:19 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/bool_constant/</guid><description>原文：https://zh.cppreference.com/w/c/language/bool_constant 语法 true (1) (C23 起) false (2) (C23 起) 解</description></item><item><title>goto 语句</title><link>https://before80.github.io/lang/c/language/statements/goto/</link><pubDate>Sat, 12 Apr 2025 16:28:02 +0800</pubDate><guid>https://before80.github.io/lang/c/language/statements/goto/</guid><description>原文：https://zh.cppreference.com/w/c/language/goto ​ 将控制无条件转移到所欲位置。 ​ 在无法用约定</description></item><item><title>continue</title><link>https://before80.github.io/lang/c/language/keyword/continue/</link><pubDate>Sat, 12 Apr 2025 10:59:37 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/continue/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/continue 用法 continue 语句：用作该语句的声明</description></item><item><title>算术类型</title><link>https://before80.github.io/lang/c/language/basic_concepts/arithmetic_types/</link><pubDate>Fri, 11 Apr 2025 20:44:38 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/arithmetic_types/</guid><description>原文：https://zh.cppreference.com/w/c/language/arithmetic_types （可参阅类型，以获得</description></item><item><title>CustomHTTPConfiguration</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomHTTPConfiguration/</link><pubDate>Tue, 18 Mar 2025 17:00:44 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomHTTPConfiguration/</guid><description>原文： 源码 测试</description></item><item><title>&lt;locale.h></title><link>https://before80.github.io/lang/c/header/locale/</link><pubDate>Mon, 14 Apr 2025 10:02:55 +0800</pubDate><guid>https://before80.github.io/lang/c/header/locale/</guid><description>原文：https://zh.cppreference.com/w/c/header/locale ​ 此标头是本地化库的一部分。 类型 lconv localeconv 所返回的</description></item><item><title>_Alignas (C11 起)(C23 弃用), alignas (C23 起)</title><link>https://before80.github.io/lang/c/language/declarations/_Alignas/</link><pubDate>Sun, 13 Apr 2025 10:59:07 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/_Alignas/</guid><description>原文：https://zh.cppreference.com/w/c/language/_Alignas ​ 出现于声明语法中，作为修改所声明对</description></item><item><title>预定义空指针常量</title><link>https://before80.github.io/lang/c/language/expressions/nullptr/</link><pubDate>Sat, 12 Apr 2025 20:25:46 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/nullptr/</guid><description>原文：https://zh.cppreference.com/w/c/language/nullptr 语法 nullptr (C23 起) 解释 ​ 关键词 nullptr 代表预定义的</description></item><item><title>default</title><link>https://before80.github.io/lang/c/language/keyword/default/</link><pubDate>Sat, 12 Apr 2025 11:00:31 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/default/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/default 用法 switch 语句：用作缺省情况标签的声明 泛型表</description></item><item><title>对象与对齐</title><link>https://before80.github.io/lang/c/language/basic_concepts/object/</link><pubDate>Fri, 11 Apr 2025 23:18:21 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/object/</guid><description>原文：https://zh.cppreference.com/w/c/language/object ​ C 程序创建、销毁、访问并操作对象。 ​ C</description></item><item><title>CustomLogFile</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomLogFile/</link><pubDate>Tue, 18 Mar 2025 17:00:46 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomLogFile/</guid><description>原文： 源码 测试</description></item><item><title>&lt;math.h></title><link>https://before80.github.io/lang/c/header/math/</link><pubDate>Mon, 14 Apr 2025 10:18:23 +0800</pubDate><guid>https://before80.github.io/lang/c/header/math/</guid><description>原文： ​ 此标头是数学库的一部分。 本节未完成 原因：recheck add more from B.11 Mathematics &amp;lt;math.h&amp;gt; 类型 float_t (C99) 宽度至少等于 float 的最高效浮点数类型 (typedef) double_t (C99) 宽度至少等于 double 的最高</description></item><item><title>存储类说明符</title><link>https://before80.github.io/lang/c/language/declarations/storage_duration/</link><pubDate>Sun, 13 Apr 2025 11:01:38 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/storage_duration/</guid><description>原文：https://zh.cppreference.com/w/c/language/storage_duration ​ 指定对象和函数的存</description></item><item><title>字符串字面量</title><link>https://before80.github.io/lang/c/language/expressions/string_literal/</link><pubDate>Sat, 12 Apr 2025 20:28:00 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/string_literal/</guid><description>原文：https://zh.cppreference.com/w/c/language/string_literal ​ 原位构造指定字符数组类</description></item><item><title>do</title><link>https://before80.github.io/lang/c/language/keyword/do/</link><pubDate>Sat, 12 Apr 2025 11:01:13 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/do/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/do 用法 do-while 循环：用作该循环的声明</description></item><item><title>main 函数</title><link>https://before80.github.io/lang/c/language/basic_concepts/main_function/</link><pubDate>Fri, 11 Apr 2025 23:22:30 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/main_function/</guid><description>原文：https://zh.cppreference.com/w/c/language/main_function ​ 每个要在宿主环境运行的编</description></item><item><title>CustomMiddleware</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomMiddleware/</link><pubDate>Tue, 18 Mar 2025 17:00:48 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomMiddleware/</guid><description>原文： 源码 测试</description></item><item><title>&lt;signal.h></title><link>https://before80.github.io/lang/c/header/signal/</link><pubDate>Mon, 14 Apr 2025 14:32:48 +0800</pubDate><guid>https://before80.github.io/lang/c/header/signal/</guid><description>原文：https://zh.cppreference.com/w/c/header/signal ​ 此标头是程序支持库的一部分。 类型 sig_atomic_t 可以从异</description></item><item><title>&lt;setjmp.h></title><link>https://before80.github.io/lang/c/header/setjmp/</link><pubDate>Mon, 14 Apr 2025 13:57:06 +0800</pubDate><guid>https://before80.github.io/lang/c/header/setjmp/</guid><description>原文： ​ 此标头是程序支持工具库的一部分。 类型 jmp_buf 执行上下文的类型 (typedef) 宏 setjmp 保存上下文 (宏函数) 函数 longjmp 跳转到指定位置 (函数) 概要 1 2 3 4 5 6 #define __STDC_VERSION_SETJMP_H__ 202311L typedef</description></item><item><title>外部及试探性定义</title><link>https://before80.github.io/lang/c/language/declarations/extern/</link><pubDate>Sun, 13 Apr 2025 11:07:51 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/extern/</guid><description>原文：https://zh.cppreference.com/w/c/language/extern ​ 在翻译单元的顶层（及在预处理器后拥有所</description></item><item><title>复合字面量 (C99 起)</title><link>https://before80.github.io/lang/c/language/expressions/compound_literal/</link><pubDate>Sat, 12 Apr 2025 20:33:43 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/compound_literal/</guid><description>原文：https://zh.cppreference.com/w/c/language/compound_literal ​ 就地构造一个指定类</description></item><item><title>double</title><link>https://before80.github.io/lang/c/language/keyword/double/</link><pubDate>Sat, 12 Apr 2025 11:01:42 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/double/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/double 用法 double 类型：用作该类型的声明 long double 类型：在与</description></item><item><title>如同规则</title><link>https://before80.github.io/lang/c/language/basic_concepts/as_if/</link><pubDate>Fri, 11 Apr 2025 23:28:37 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/as_if/</guid><description>原文：https://zh.cppreference.com/w/c/language/as_if ​ 允许进行任何以及所有的不会改变程序的可观</description></item><item><title>CustomValidators</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomValidators/</link><pubDate>Tue, 18 Mar 2025 17:00:50 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomValidators/</guid><description>原文： 源码 测试</description></item><item><title>&lt;stdalign.h> (C11)(C23 弃用)</title><link>https://before80.github.io/lang/c/header/stdalign/</link><pubDate>Mon, 14 Apr 2025 14:34:51 +0800</pubDate><guid>https://before80.github.io/lang/c/header/stdalign/</guid><description>原文：https://zh.cppreference.com/w/c/header/stdalign ​ 此标头是类型支持库的一部分。 宏 alignas (C11) 便利</description></item><item><title>typedef 声明</title><link>https://before80.github.io/lang/c/language/declarations/typedef/</link><pubDate>Sun, 13 Apr 2025 11:09:30 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/typedef/</guid><description>原文：https://zh.cppreference.com/w/c/language/typedef ​ typedef 声明 ﻿提供一种声明标识符为类型别名</description></item><item><title>C 运算符优先级</title><link>https://before80.github.io/lang/c/language/expressions/operator_precedence/</link><pubDate>Sat, 12 Apr 2025 20:37:24 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/operator_precedence/</guid><description>原文：https://zh.cppreference.com/w/c/language/operator_precedence ​ 下表列出 C 运</description></item><item><title>else</title><link>https://before80.github.io/lang/c/language/keyword/else/</link><pubDate>Sat, 12 Apr 2025 11:02:14 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/else/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/else 用法 if 语句：用作替代分支的声明</description></item><item><title>未定义行为</title><link>https://before80.github.io/lang/c/language/basic_concepts/behavior/</link><pubDate>Fri, 11 Apr 2025 23:31:01 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/behavior/</guid><description>原文：https://zh.cppreference.com/w/c/language/behavior ​ C 语言标准精确指定了 C 语言程序的可</description></item><item><title>DefineFormatForTheLogOfRoutes</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/DefineFormatForTheLogOfRoutes/</link><pubDate>Tue, 18 Mar 2025 17:00:52 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/DefineFormatForTheLogOfRoutes/</guid><description>原文： 源码 测试</description></item><item><title>&lt;stdarg.h></title><link>https://before80.github.io/lang/c/header/stdarg/</link><pubDate>Mon, 14 Apr 2025 14:35:58 +0800</pubDate><guid>https://before80.github.io/lang/c/header/stdarg/</guid><description>原文：https://zh.cppreference.com/w/c/header/stdarg ​ 此标头提供对变参数函数的支持。 类型 va_list 保有 v</description></item><item><title>_Static_assert</title><link>https://before80.github.io/lang/c/language/declarations/_Static_assert/</link><pubDate>Sun, 13 Apr 2025 11:11:15 +0800</pubDate><guid>https://before80.github.io/lang/c/language/declarations/_Static_assert/</guid><description>原文：https://zh.cppreference.com/w/c/language/_Static_assert 语法 _Static_assert ( 表达式 , 消息 ) (C11</description></item><item><title>成员访问运算符</title><link>https://before80.github.io/lang/c/language/expressions/operator_member_access/</link><pubDate>Sat, 12 Apr 2025 20:42:14 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/operator_member_access/</guid><description>原文：https://zh.cppreference.com/w/c/language/operator_member_access ​ 成员访</description></item><item><title>内联汇编</title><link>https://before80.github.io/lang/c/language/keyword/asm/</link><pubDate>Sat, 12 Apr 2025 11:04:13 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/asm/</guid><description>原文：https://zh.cppreference.com/w/c/language/asm ​ 内联汇编（常由 asm 关键词引入）给予在 C 程序中嵌</description></item><item><title>内存模型</title><link>https://before80.github.io/lang/c/language/basic_concepts/memory_model/</link><pubDate>Fri, 11 Apr 2025 23:35:02 +0800</pubDate><guid>https://before80.github.io/lang/c/language/basic_concepts/memory_model/</guid><description>原文：https://zh.cppreference.com/w/c/language/memory_model ​ 为 C 抽象机的目的，定义计算</description></item><item><title>GoroutinesInsideAMiddleware</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/GoroutinesInsideAMiddleware/</link><pubDate>Tue, 18 Mar 2025 17:00:54 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/GoroutinesInsideAMiddleware/</guid><description>原文： 源码 测试</description></item><item><title>&lt;stdatomic.h></title><link>https://before80.github.io/lang/c/header/stdatomic/</link><pubDate>Mon, 14 Apr 2025 14:39:30 +0800</pubDate><guid>https://before80.github.io/lang/c/header/stdatomic/</guid><description>原文：https://zh.cppreference.com/w/c/header/stdatomic ​ 此标头提供原子操作，特别是，它是并发</description></item><item><title>逻辑运算符</title><link>https://before80.github.io/lang/c/language/expressions/operator_logical/</link><pubDate>Sat, 12 Apr 2025 20:47:16 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/operator_logical/</guid><description>原文：https://zh.cppreference.com/w/c/language/operator_logical ​ 逻辑运算符对其操作</description></item><item><title>extern</title><link>https://before80.github.io/lang/c/language/keyword/extern/</link><pubDate>Sat, 12 Apr 2025 11:06:56 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/extern/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/extern 用法 拥有内部或更常见的外部链接之一的静态存</description></item><item><title>GracefulRestartOrStop</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/GracefulRestartOrStop/</link><pubDate>Tue, 18 Mar 2025 17:00:56 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/GracefulRestartOrStop/</guid><description>原文： 源码 测试</description></item><item><title>&lt;stdbit.h></title><link>https://before80.github.io/lang/c/header/stdbit/</link><pubDate>Mon, 14 Apr 2025 14:43:32 +0800</pubDate><guid>https://before80.github.io/lang/c/header/stdbit/</guid><description>原文：https://zh.cppreference.com/w/c/header/stdbit ​ 此标头是数值库的一部分，特别是，它提供处理</description></item><item><title>比较运算符</title><link>https://before80.github.io/lang/c/language/expressions/operator_comparison/</link><pubDate>Sat, 12 Apr 2025 20:50:51 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/operator_comparison/</guid><description>原文：https://zh.cppreference.com/w/c/language/operator_comparison ​ 比较运算符是</description></item><item><title>false</title><link>https://before80.github.io/lang/c/language/keyword/false/</link><pubDate>Sat, 12 Apr 2025 11:07:39 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/false/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/false 用法 预定义布尔常量</description></item><item><title>GroupingRoutes</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/GroupingRoutes/</link><pubDate>Tue, 18 Mar 2025 17:00:58 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/GroupingRoutes/</guid><description>原文： 源码 测试</description></item><item><title>&lt;stdbool.h></title><link>https://before80.github.io/lang/c/header/stdbool/</link><pubDate>Mon, 14 Apr 2025 14:44:53 +0800</pubDate><guid>https://before80.github.io/lang/c/header/stdbool/</guid><description>原文：https://zh.cppreference.com/w/c/header/stdbool ​ 此标头提供用于布尔类型的宏。 宏 bool (C99) 便利宏</description></item><item><title>算术运算符</title><link>https://before80.github.io/lang/c/language/expressions/operator_arithmetic/</link><pubDate>Sat, 12 Apr 2025 20:56:55 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/operator_arithmetic/</guid><description>原文：https://zh.cppreference.com/w/c/language/operator_arithmetic ​ 算术运算符在</description></item><item><title>float</title><link>https://before80.github.io/lang/c/language/keyword/float/</link><pubDate>Sat, 12 Apr 2025 11:08:14 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/float/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/float 用法 float 类型：用作该类型的声明</description></item><item><title>HowToWriteLogFile</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/HowToWriteLogFile/</link><pubDate>Tue, 18 Mar 2025 17:01:00 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/HowToWriteLogFile/</guid><description>原文： 源码 测试</description></item><item><title>stdckdint</title><link>https://before80.github.io/lang/c/header/stdckdint/</link><pubDate>Mon, 14 Apr 2025 14:46:22 +0800</pubDate><guid>https://before80.github.io/lang/c/header/stdckdint/</guid><description>原文：</description></item><item><title>赋值运算符</title><link>https://before80.github.io/lang/c/language/expressions/operator_assignment/</link><pubDate>Sat, 12 Apr 2025 21:10:54 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/operator_assignment/</guid><description>原文：https://zh.cppreference.com/w/c/language/operator_assignment ​ 赋值及复合赋</description></item><item><title>for</title><link>https://before80.github.io/lang/c/language/keyword/for/</link><pubDate>Sat, 12 Apr 2025 11:08:56 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/for/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/for 用法 for 循环：用作该循环的声明</description></item><item><title>HTMLRendering</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/HTMLRendering/</link><pubDate>Tue, 18 Mar 2025 17:01:02 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/HTMLRendering/</guid><description>原文： 源码 测试</description></item><item><title>&lt;stddef.h></title><link>https://before80.github.io/lang/c/header/stddef/</link><pubDate>Mon, 14 Apr 2025 14:47:06 +0800</pubDate><guid>https://before80.github.io/lang/c/header/stddef/</guid><description>原文：https://zh.cppreference.com/w/c/header/stddef ​ 此标头是类型支持库的一部分，特别是，它提供</description></item><item><title>自增/自减运算符</title><link>https://before80.github.io/lang/c/language/expressions/operator_incdec/</link><pubDate>Sat, 12 Apr 2025 21:17:07 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/operator_incdec/</guid><description>原文：https://zh.cppreference.com/w/c/language/operator_incdec ​ 自增/自减运算符是使</description></item><item><title>goto</title><link>https://before80.github.io/lang/c/language/keyword/goto/</link><pubDate>Sat, 12 Apr 2025 11:09:41 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/goto/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/goto 用法 goto 语句：用作该语句的声明</description></item><item><title>HTTP2ServerPush</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/HTTP2ServerPush/</link><pubDate>Tue, 18 Mar 2025 17:01:04 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/HTTP2ServerPush/</guid><description>原文： 源码 测试</description></item><item><title>&lt;stdint.h></title><link>https://before80.github.io/lang/c/header/stdint/</link><pubDate>Mon, 14 Apr 2025 14:48:27 +0800</pubDate><guid>https://before80.github.io/lang/c/header/stdint/</guid><description>原文：https://zh.cppreference.com/w/c/header/stdint ​ 本标头是类型支持库的一部分，提供定宽整数类</description></item><item><title>其他运算符</title><link>https://before80.github.io/lang/c/language/expressions/operator_other/</link><pubDate>Sat, 12 Apr 2025 21:19:36 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/operator_other/</guid><description>原文：https://zh.cppreference.com/w/c/language/operator_other ​ 汇集并不适合任何其他主</description></item><item><title>if</title><link>https://before80.github.io/lang/c/language/keyword/if/</link><pubDate>Sat, 12 Apr 2025 11:11:26 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/if/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/if 用法 if 语句：用作 if 语句的声明</description></item><item><title>JSONP</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/JSONP/</link><pubDate>Tue, 18 Mar 2025 17:01:06 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/JSONP/</guid><description>原文： 源码 测试</description></item><item><title>&lt;stdio.h></title><link>https://before80.github.io/lang/c/header/stdio/</link><pubDate>Sun, 13 Apr 2025 23:02:13 +0800</pubDate><guid>https://before80.github.io/lang/c/header/stdio/</guid><description>原文：https://zh.cppreference.com/w/c/header/stdio ​ 此标头是输入输出库的一部分，提供通用的文件操</description></item><item><title>sizeof 运算符</title><link>https://before80.github.io/lang/c/language/expressions/sizeof/</link><pubDate>Sat, 12 Apr 2025 21:28:42 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/sizeof/</guid><description>原文：https://zh.cppreference.com/w/c/language/sizeof ​ 查询对象或类型的大小。 ​ 在必须知道对象</description></item><item><title>inline</title><link>https://before80.github.io/lang/c/language/keyword/inline/</link><pubDate>Sat, 12 Apr 2025 11:11:59 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/inline/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/inline 用法 inline 函数指定符 (C99 起)</description></item><item><title>MapAsQuerystringOrPostformParameters</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/MapAsQuerystringOrPostformParameters/</link><pubDate>Tue, 18 Mar 2025 17:01:08 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/MapAsQuerystringOrPostformParameters/</guid><description>原文： 源码 测试</description></item><item><title>&lt;stdlib.h></title><link>https://before80.github.io/lang/c/header/stdlib/</link><pubDate>Mon, 14 Apr 2025 14:50:10 +0800</pubDate><guid>https://before80.github.io/lang/c/header/stdlib/</guid><description>原文：https://zh.cppreference.com/w/c/header/stdlib ​ 此标头是程序支持工具库的一部分，特别是，它</description></item><item><title>_Alignof (C11 起)(C23 弃用), alignof (C23 起) 运算符</title><link>https://before80.github.io/lang/c/language/expressions/_Alignof/</link><pubDate>Sat, 12 Apr 2025 21:30:00 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/_Alignof/</guid><description>原文：https://zh.cppreference.com/w/c/language/_Alignof ​ 查询其运算数类型的对齐要求。 语法 _Alignof(</description></item><item><title>int</title><link>https://before80.github.io/lang/c/language/keyword/int/</link><pubDate>Sat, 12 Apr 2025 11:13:07 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/int/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/int 用法 int 类型：用作该类型的声明</description></item><item><title>ModelBindingAndValidation</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ModelBindingAndValidation/</link><pubDate>Tue, 18 Mar 2025 17:01:10 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ModelBindingAndValidation/</guid><description>原文： 源码 测试</description></item><item><title>stdmchar 不存在呀</title><link>https://before80.github.io/lang/c/header/stdmchar/</link><pubDate>Mon, 14 Apr 2025 14:52:29 +0800</pubDate><guid>https://before80.github.io/lang/c/header/stdmchar/</guid><description>原文：</description></item><item><title>转换运算符</title><link>https://before80.github.io/lang/c/language/expressions/cast/</link><pubDate>Sat, 12 Apr 2025 21:31:05 +0800</pubDate><guid>https://before80.github.io/lang/c/language/expressions/cast/</guid><description>原文：https://zh.cppreference.com/w/c/language/cast ​ 进行显式类型转换。 语法 ( 类型名 ) 表达式 其中</description></item><item><title>long</title><link>https://before80.github.io/lang/c/language/keyword/long/</link><pubDate>Sat, 12 Apr 2025 11:13:50 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/long/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/long 用法 long 类型修饰符</description></item><item><title>MultipartUrlencodedBinding</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/MultipartUrlencodedBinding/</link><pubDate>Tue, 18 Mar 2025 17:01:12 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/MultipartUrlencodedBinding/</guid><description>原文： 源码 测试</description></item><item><title>&lt;stdnoreturn.h> (C11)(C23 弃用)</title><link>https://before80.github.io/lang/c/header/stdnoreturn/</link><pubDate>Mon, 14 Apr 2025 15:21:54 +0800</pubDate><guid>https://before80.github.io/lang/c/header/stdnoreturn/</guid><description>原文：https://zh.cppreference.com/w/c/header/stdnoreturn ​ 此标头提供一个便利宏 noretu</description></item><item><title>nullptr</title><link>https://before80.github.io/lang/c/language/keyword/nullptr/</link><pubDate>Sat, 12 Apr 2025 11:14:21 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/nullptr/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/nullptr 用法 nullptr pointer literal (C23 起)</description></item><item><title>MultipartUrlencodedForm</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/MultipartUrlencodedForm/</link><pubDate>Tue, 18 Mar 2025 17:01:14 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/MultipartUrlencodedForm/</guid><description>原文： 源码 测试</description></item><item><title>&lt;string.h></title><link>https://before80.github.io/lang/c/header/string/</link><pubDate>Mon, 14 Apr 2025 15:22:50 +0800</pubDate><guid>https://before80.github.io/lang/c/header/string/</guid><description>原文：https://zh.cppreference.com/w/c/header/string ​ 此标题提供了用于处理空终止字节字符串的函数</description></item><item><title>register</title><link>https://before80.github.io/lang/c/language/keyword/register/</link><pubDate>Sat, 12 Apr 2025 11:15:04 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/register/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/register 用法 无链接的自动存储期类指定符。提示变</description></item><item><title>Multitemplate</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/Multitemplate/</link><pubDate>Tue, 18 Mar 2025 17:01:16 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/Multitemplate/</guid><description>原文： 源码 测试</description></item><item><title>&lt;tgmath.h></title><link>https://before80.github.io/lang/c/header/tgmath/</link><pubDate>Mon, 14 Apr 2025 15:24:32 +0800</pubDate><guid>https://before80.github.io/lang/c/header/tgmath/</guid><description>原文：https://zh.cppreference.com/w/c/header/tgmath ​ 此标头是数值库的一部分，并提供一套泛型宏，</description></item><item><title>restrict</title><link>https://before80.github.io/lang/c/language/keyword/restrict/</link><pubDate>Sat, 12 Apr 2025 11:15:48 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/restrict/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/restrict 用法 restrict 类型限定符 (C99 起)</description></item><item><title>OnlyBindQueryString</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/OnlyBindQueryString/</link><pubDate>Tue, 18 Mar 2025 17:01:17 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/OnlyBindQueryString/</guid><description>原文： 源码 测试</description></item><item><title>&lt;threads.h> (C11)</title><link>https://before80.github.io/lang/c/header/threads/</link><pubDate>Mon, 14 Apr 2025 15:26:29 +0800</pubDate><guid>https://before80.github.io/lang/c/header/threads/</guid><description>原文：https://zh.cppreference.com/w/c/header/threads ​ 此标头是并发支持库的一部分，并提供了对线</description></item><item><title>return</title><link>https://before80.github.io/lang/c/language/keyword/return/</link><pubDate>Sat, 12 Apr 2025 11:16:17 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/return/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/return 用法 return 语句：用作该语句的声明</description></item><item><title>ParametersInPath</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ParametersInPath/</link><pubDate>Tue, 18 Mar 2025 17:01:19 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ParametersInPath/</guid><description>原文： 源码 测试</description></item><item><title>&lt;time.h></title><link>https://before80.github.io/lang/c/header/time/</link><pubDate>Mon, 14 Apr 2025 15:28:48 +0800</pubDate><guid>https://before80.github.io/lang/c/header/time/</guid><description>原文：https://zh.cppreference.com/w/c/header/time ​ 此标头是日期与时间工具库的一部分。 函数 时间操纵</description></item><item><title>short</title><link>https://before80.github.io/lang/c/language/keyword/short/</link><pubDate>Sat, 12 Apr 2025 11:17:19 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/short/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/short 用法 short 类型修饰符</description></item><item><title>PureJSON</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/PureJSON/</link><pubDate>Tue, 18 Mar 2025 17:01:21 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/PureJSON/</guid><description>原文： 源码 测试</description></item><item><title>&lt;uchar.h> (C11)</title><link>https://before80.github.io/lang/c/header/uchar/</link><pubDate>Mon, 14 Apr 2025 15:31:34 +0800</pubDate><guid>https://before80.github.io/lang/c/header/uchar/</guid><description>原文：https://zh.cppreference.com/w/c/header/uchar ​ 此标头是空终结多字节字符串库的一部分。 函数 mbrtoc8</description></item><item><title>signed</title><link>https://before80.github.io/lang/c/language/keyword/signed/</link><pubDate>Sat, 12 Apr 2025 11:17:50 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/signed/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/signed 用法 signed 类型修饰符</description></item><item><title>QueryAndPostForm</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/QueryAndPostForm/</link><pubDate>Tue, 18 Mar 2025 17:01:23 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/QueryAndPostForm/</guid><description>原文： 源码 测试</description></item><item><title>&lt;wchar.h> (C95)</title><link>https://before80.github.io/lang/c/header/wchar/</link><pubDate>Mon, 14 Apr 2025 15:32:43 +0800</pubDate><guid>https://before80.github.io/lang/c/header/wchar/</guid><description>原文：https://zh.cppreference.com/w/c/header/wchar ​ 此标头是空终止宽字符串库的一部分。 函数 转换为</description></item><item><title>fortran</title><link>https://before80.github.io/lang/c/language/keyword/fortran/</link><pubDate>Sat, 12 Apr 2025 11:18:34 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/fortran/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/fortran 用法 为 Fortran 语言链接而设的条件性支持持类型指</description></item><item><title>QueryStringParameters</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/QueryStringParameters/</link><pubDate>Tue, 18 Mar 2025 17:01:25 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/QueryStringParameters/</guid><description>原文： 源码 测试</description></item><item><title>sizeof</title><link>https://before80.github.io/lang/c/language/keyword/sizeof/</link><pubDate>Sat, 12 Apr 2025 11:19:10 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/sizeof/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/sizeof 用法 sizeof 运算符</description></item><item><title>Redirects</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/Redirects/</link><pubDate>Tue, 18 Mar 2025 17:01:27 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/Redirects/</guid><description>原文： 源码 测试</description></item><item><title>&lt;wctype.h> (C95)</title><link>https://before80.github.io/lang/c/header/wctype/</link><pubDate>Mon, 14 Apr 2025 15:34:28 +0800</pubDate><guid>https://before80.github.io/lang/c/header/wctype/</guid><description>原文：https://zh.cppreference.com/w/c/header/wctype ​ 此标头是宽字符分类与映射工具库的一部分。 函</description></item><item><title>static</title><link>https://before80.github.io/lang/c/language/keyword/static/</link><pubDate>Sat, 12 Apr 2025 11:19:54 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/static/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/static 用法 具有静态存储期和内部链接的文件作用域声</description></item><item><title>RunMultipleService</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/RunMultipleService/</link><pubDate>Tue, 18 Mar 2025 17:01:29 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/RunMultipleService/</guid><description>原文： 源码 测试</description></item><item><title>static_assert</title><link>https://before80.github.io/lang/c/language/keyword/static_assert/</link><pubDate>Sat, 12 Apr 2025 11:20:48 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/static_assert/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/static_assert 用法 静态断言声明 (C23 起)</description></item><item><title>SecureJSON</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/SecureJSON/</link><pubDate>Tue, 18 Mar 2025 17:01:31 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/SecureJSON/</guid><description>原文： 源码 测试</description></item><item><title>struct</title><link>https://before80.github.io/lang/c/language/keyword/struct/</link><pubDate>Sat, 12 Apr 2025 11:21:18 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/struct/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/struct 用法 复合类型的声明</description></item><item><title>SecurityHeaders</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/SecurityHeaders/</link><pubDate>Tue, 18 Mar 2025 17:01:33 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/SecurityHeaders/</guid><description>原文： 源码 测试</description></item><item><title>switch</title><link>https://before80.github.io/lang/c/language/keyword/switch/</link><pubDate>Sat, 12 Apr 2025 11:21:49 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/switch/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/switch 用法 switch 语句：用作该语句的声明</description></item><item><title>ServingDataFromReader</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ServingDataFromReader/</link><pubDate>Tue, 18 Mar 2025 17:01:35 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ServingDataFromReader/</guid><description>源码 测试</description></item><item><title>thread_local</title><link>https://before80.github.io/lang/c/language/keyword/thread_local/</link><pubDate>Sat, 12 Apr 2025 11:36:20 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/thread_local/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/thread_local 用法 线程存储类说明符 (C23 起)</description></item><item><title>ServingStaticFiles</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ServingStaticFiles/</link><pubDate>Tue, 18 Mar 2025 17:01:37 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ServingStaticFiles/</guid><description>原文： 源码 测试</description></item><item><title>true</title><link>https://before80.github.io/lang/c/language/keyword/true/</link><pubDate>Sat, 12 Apr 2025 11:37:04 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/true/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/true 用法 预定义布尔常量</description></item><item><title>SupportLetsEncrypt</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/SupportLetsEncrypt/</link><pubDate>Tue, 18 Mar 2025 17:01:39 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/SupportLetsEncrypt/</guid><description>原文： 源码 测试</description></item><item><title>typedef</title><link>https://before80.github.io/lang/c/language/keyword/typedef/</link><pubDate>Sat, 12 Apr 2025 11:37:33 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/typedef/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/typedef 用法 typedef 声明</description></item><item><title>TryToBindBodyIntoDifferentStructs</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/TryToBindBodyIntoDifferentStructs/</link><pubDate>Tue, 18 Mar 2025 17:01:42 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/TryToBindBodyIntoDifferentStructs/</guid><description>原文： 源码 测试</description></item><item><title>typeof</title><link>https://before80.github.io/lang/c/language/keyword/typeof/</link><pubDate>Sat, 12 Apr 2025 11:38:07 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/typeof/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/typeof 用法 typeof 运算符 (C23 起)</description></item><item><title>UploadFiles</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UploadFiles/</link><pubDate>Tue, 18 Mar 2025 17:01:43 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UploadFiles/</guid><description>原文： 源码 测试</description></item><item><title>typeof_unqual</title><link>https://before80.github.io/lang/c/language/keyword/typeof_unqual/</link><pubDate>Sat, 12 Apr 2025 11:38:46 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/typeof_unqual/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/typeof_unqual 用法 移除限定符的 typeof 运算符 (C23 起</description></item><item><title>union</title><link>https://before80.github.io/lang/c/language/keyword/union/</link><pubDate>Sat, 12 Apr 2025 11:39:28 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/union/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/union 用法 联合体类型的声明</description></item><item><title>UsingHTTPMethod</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UsingHTTPMethod/</link><pubDate>Tue, 18 Mar 2025 17:01:47 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UsingHTTPMethod/</guid><description>原文： 源码 测试</description></item><item><title>unsigned</title><link>https://before80.github.io/lang/c/language/keyword/unsigned/</link><pubDate>Sat, 12 Apr 2025 11:40:01 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/unsigned/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/unsigned 用法 unsigned 类型修饰符</description></item><item><title>UsingMiddleware</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UsingMiddleware/</link><pubDate>Tue, 18 Mar 2025 17:01:49 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UsingMiddleware/</guid><description>原文： 源码 测试</description></item><item><title>void</title><link>https://before80.github.io/lang/c/language/keyword/void/</link><pubDate>Sat, 12 Apr 2025 11:40:31 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/void/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/void 用法 void 类型：用作不完整类型的声明 void ：用于无参数</description></item><item><title>WithoutMiddlewareByDefault</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/WithoutMiddlewareByDefault/</link><pubDate>Tue, 18 Mar 2025 17:01:51 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/WithoutMiddlewareByDefault/</guid><description>原文： 源码 测试</description></item><item><title>volatile</title><link>https://before80.github.io/lang/c/language/keyword/volatile/</link><pubDate>Sat, 12 Apr 2025 11:41:16 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/volatile/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/volatile 用法 volatile 类型限定符</description></item><item><title>XMLJSONYAMLProtoBufRendering</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/XMLJSONYAMLProtoBufRendering/</link><pubDate>Tue, 18 Mar 2025 19:25:54 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/XMLJSONYAMLProtoBufRendering/</guid><description>原文： 源码 测试</description></item><item><title>while</title><link>https://before80.github.io/lang/c/language/keyword/while/</link><pubDate>Sat, 12 Apr 2025 11:41:48 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/while/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/while 用法 while 循环：用作该循环的声明 do-while 循环：用作循环</description></item><item><title>_Alignas</title><link>https://before80.github.io/lang/c/language/keyword/_Alignas/</link><pubDate>Sat, 12 Apr 2025 11:42:35 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Alignas/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Alignas 用法 _Alignas 对齐指定符。 (C11 起)</description></item><item><title>_Alignof</title><link>https://before80.github.io/lang/c/language/keyword/_Alignof/</link><pubDate>Sat, 12 Apr 2025 11:43:15 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Alignof/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Alignof 用法 _Alignof 运算符 (C11 起)</description></item><item><title>_BigInt</title><link>https://before80.github.io/lang/c/language/keyword/_BigInt/</link><pubDate>Sat, 12 Apr 2025 11:44:33 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_BigInt/</guid><description>原文：</description></item><item><title>_Atomic</title><link>https://before80.github.io/lang/c/language/keyword/_Atomic/</link><pubDate>Sat, 12 Apr 2025 11:43:54 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Atomic/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Atomic 用法 原子类型指定符及限定符 (C11 起)</description></item><item><title>_Bool</title><link>https://before80.github.io/lang/c/language/keyword/_Bool/</link><pubDate>Sat, 12 Apr 2025 11:46:03 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Bool/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Bool 用法 布尔类型：用作该类型的声明(C99 起)(</description></item><item><title>_Complex</title><link>https://before80.github.io/lang/c/language/keyword/_Complex/</link><pubDate>Sat, 12 Apr 2025 11:48:06 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Complex/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Complex 用法 _Complex 类型：用作该类型的声明 (C99 起)</description></item><item><title>_Decimal128</title><link>https://before80.github.io/lang/c/language/keyword/_Decimal128/</link><pubDate>Sat, 12 Apr 2025 11:48:53 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Decimal128/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Decimal128 用法 _Decimal128 类型：用作该类型的声明 (C23 起</description></item><item><title>_Decimal32</title><link>https://before80.github.io/lang/c/language/keyword/_Decimal32/</link><pubDate>Sat, 12 Apr 2025 11:49:22 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Decimal32/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Decimal32 用法 _Decimal32 类型：用作该类型的声明 (C23 起)</description></item><item><title>_Decimal64</title><link>https://before80.github.io/lang/c/language/keyword/_Decimal64/</link><pubDate>Sat, 12 Apr 2025 11:49:57 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Decimal64/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Decimal64 用法 _Decimal64 类型：用作该类型的声明 (C23 起)</description></item><item><title>_Generic</title><link>https://before80.github.io/lang/c/language/keyword/_Generic/</link><pubDate>Sat, 12 Apr 2025 11:50:29 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Generic/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Generic 用法 泛型表达式 (C11 起)</description></item><item><title>_Imaginary</title><link>https://before80.github.io/lang/c/language/keyword/_Imaginary/</link><pubDate>Sat, 12 Apr 2025 11:52:40 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Imaginary/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Imaginary 用法 虚浮点数类型说明符 (C99 起)</description></item><item><title>_Noreturn</title><link>https://before80.github.io/lang/c/language/keyword/_Noreturn/</link><pubDate>Sat, 12 Apr 2025 11:53:15 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Noreturn/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Noreturn 用法 _Noreturn 函数说明符 (C23 弃用) _Noreturn 属性记号 (C23</description></item><item><title>_Static_assert</title><link>https://before80.github.io/lang/c/language/keyword/_Static_assert/</link><pubDate>Sat, 12 Apr 2025 11:54:27 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Static_assert/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Static_assert 用法 _Static_assert 声明 (C11 起)(C23 弃</description></item><item><title>_Thread_local</title><link>https://before80.github.io/lang/c/language/keyword/_Thread_local/</link><pubDate>Sat, 12 Apr 2025 11:55:03 +0800</pubDate><guid>https://before80.github.io/lang/c/language/keyword/_Thread_local/</guid><description>原文：https://zh.cppreference.com/w/c/keyword/_Thread_local 用法 线程存储类限定符。 (C11 起)</description></item></channel></rss>