<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程语言</title><link>https://before80.github.io/lang/</link><description>Recent content on 编程语言</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://before80.github.io/lang/index.xml" rel="self" type="application/rss+xml"/><item><title>histor</title><link>https://before80.github.io/lang/c/histor/</link><pubDate>Fri, 11 Apr 2025 15:26:55 +0800</pubDate><guid>https://before80.github.io/lang/c/histor/</guid><description>原文：</description></item><item><title>history</title><link>https://before80.github.io/lang/c/history/</link><pubDate>Fri, 11 Apr 2025 15:26:20 +0800</pubDate><guid>https://before80.github.io/lang/c/history/</guid><description>参考：https://zh.cppreference.com/w/c/language/history</description></item><item><title>ASCII</title><link>https://before80.github.io/lang/base/charset/ASCII/</link><pubDate>Mon, 31 Mar 2025 17:24:53 +0800</pubDate><guid>https://before80.github.io/lang/base/charset/ASCII/</guid><description>注意 ​ UTF-8 完全兼容标准 ASCII（0-127），使用单字节表示。 ​ UTF-8 通过多字节编码（2 字节）覆盖了扩展 ASCII（128-255）的所有字符。</description></item><item><title>SSL/TLS</title><link>https://before80.github.io/lang/base/protocols/TLS/</link><pubDate>Mon, 10 Mar 2025 12:52:11 +0800</pubDate><guid>https://before80.github.io/lang/base/protocols/TLS/</guid><description>是什么？ ​ SSL/TLS（安全套接字层/传输层安全） 是一种加密协议，确保互联网上的通信安全。它保护数据免受窃听、篡改和伪造，确保通信的保密性</description></item><item><title>openssl</title><link>https://before80.github.io/lang/base/tools/openssl/</link><pubDate>Mon, 10 Mar 2025 07:22:49 +0800</pubDate><guid>https://before80.github.io/lang/base/tools/openssl/</guid><description>是什么 ​ OpenSSL 是一个 C 语言编写的开源软件库，包含对 SSL 和 TLS 协议的开源实现。它不仅是一个库，还提供命令行工具，用于执行各种加密任务，如生成密钥、证书</description></item><item><title>context</title><link>https://before80.github.io/lang/go/std/context/</link><pubDate>Fri, 28 Feb 2025 10:47:40 +0800</pubDate><guid>https://before80.github.io/lang/go/std/context/</guid><description>最新版本网址 ​ https://pkg.go.dev/context 作用 ​ context 包用于在 Goroutine 之间传递请求域数据、取消信号、超时和截止时间、其他元数据，核心功能包括： 控制并发操作：支持取消和超时控制，</description></item><item><title>原生JS操作HTML</title><link>https://before80.github.io/lang/js/frequent/ht/</link><pubDate>Thu, 27 Feb 2025 20:39:05 +0800</pubDate><guid>https://before80.github.io/lang/js/frequent/ht/</guid><description>元素获取 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // 根据元素的 id 属性值来获取单个元素。 // 返回</description></item><item><title>Gin 框架源码分析：设计思路与学习指南</title><link>https://before80.github.io/lang/go/frameworks/gin/gin_swdt/</link><pubDate>Wed, 12 Mar 2025 12:59:19 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/gin_swdt/</guid><description>Gin 框架源码分析：设计思路与学习指南 1. Gin 框架简介 Gin 是一个使用 Go (Golang) 语言编写的高性能 HTTP Web 框架 1。它以其类似 Martini 的 API 而闻名，但在性能上却有着显著的提升</description></item><item><title>Gin 框架源码仓库分析报告</title><link>https://before80.github.io/lang/go/frameworks/gin/gin_swdt2/</link><pubDate>Wed, 12 Mar 2025 12:59:19 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/gin_swdt2/</guid><description>Gin 框架源码仓库分析报告 1. Introduction to the Gin Framework Source Code Repository ​ Gin 框架，作为一个用 Go 语言编写的高性能 HTTP Web 框架，其设计灵感来源于 Martini，但在性能上实现了显著</description></item><item><title>Gin 框架知识点、设计思路与实现总结</title><link>https://before80.github.io/lang/go/frameworks/gin/gin_swdt3/</link><pubDate>Wed, 12 Mar 2025 12:59:19 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/gin_swdt3/</guid><description>Gin 框架知识点、设计思路与实现总结 1. Gin 框架简介 Gin 是一个用 Go (Golang) 编写的高性能 HTTP Web 框架 1。它的设计灵感来源于 Martini，但在性能上进行了大幅提升</description></item><item><title>注释</title><link>https://before80.github.io/lang/c/language/comment/</link><pubDate>Fri, 11 Apr 2025 19:34:57 +0800</pubDate><guid>https://before80.github.io/lang/c/language/comment/</guid><description>原文：https://zh.cppreference.com/w/c/comment ​ 注释的作用是一套代码内文档。插入注释到程序中时，编译器</description></item><item><title>AsciiJSON</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/AsciiJSON/</link><pubDate>Tue, 18 Mar 2025 17:00:10 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/AsciiJSON/</guid><description>原文：https://gin-gonic.com/docs/examples/ascii-json/ 源码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description></item><item><title>数组 array</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/array/</link><pubDate>Mon, 17 Feb 2025 12:07:53 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/array/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>类型</title><link>https://before80.github.io/lang/docs/basic/syntax/types/</link><pubDate>Mon, 17 Feb 2025 12:00:34 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/types/</guid><description>Go 以下是 Go 语言的详细类型分类，包括内置类型、复合类型和自定义类型。每个类型都提供了详细说明，包括类型名、默认值、示例、字节长度、最大值、最小</description></item><item><title>介绍</title><link>https://before80.github.io/lang/docs/basic/intro/</link><pubDate>Mon, 17 Feb 2025 11:55:52 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/intro/</guid><description>Go 以下是对Go语言的全面介绍，结合其历史发展、核心特性、设计哲学及典型应用场景： 一、Go语言历史 1. 诞生背景 时间线：2007年由Google工</description></item><item><title>keywords</title><link>https://before80.github.io/lang/docs/basic/syntax/keywords/</link><pubDate>Tue, 18 Feb 2025 11:44:40 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/keywords/</guid><description>给出xxx语言的关键字、软关键字（若有）、保留字（若有），先在二级菜单（菜单名称为：所有关键字）下在表格中按类别给出关键字、每个类别的关键字</description></item><item><title>ASCII 码表</title><link>https://before80.github.io/lang/c/language/ascii/</link><pubDate>Fri, 11 Apr 2025 19:44:39 +0800</pubDate><guid>https://before80.github.io/lang/c/language/ascii/</guid><description>原文：https://zh.cppreference.com/w/c/language/ascii ​ 下表包含所有 128 个 ASCII 码对应的十进制 (dec) 、八进</description></item><item><title>Bind form-data request with custom struct</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindForm-dataRequestWithCustomStruct/</link><pubDate>Tue, 18 Mar 2025 17:00:30 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindForm-dataRequestWithCustomStruct/</guid><description>原文：https://gin-gonic.com/docs/examples/bind-form-data-request-with-cus</description></item><item><title>列表 list</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/list/</link><pubDate>Mon, 17 Feb 2025 12:06:46 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/list/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>变量</title><link>https://before80.github.io/lang/docs/basic/syntax/variable/</link><pubDate>Mon, 17 Feb 2025 11:58:39 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/variable/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>安装</title><link>https://before80.github.io/lang/docs/basic/install/</link><pubDate>Mon, 17 Feb 2025 11:55:36 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/install/</guid><description>Go 以下是针对多种操作系统安装最新版Go、配置环境变量及管理多版本的详细指南： 一、通用步骤：安装最新版Go 1. 下载并安装Go 访问 Go官方下载页面</description></item><item><title>字符集与编码</title><link>https://before80.github.io/lang/c/language/charset/</link><pubDate>Fri, 11 Apr 2025 19:50:37 +0800</pubDate><guid>https://before80.github.io/lang/c/language/charset/</guid><description>原文：https://zh.cppreference.com/w/c/language/charset 基本字符集 ​ “基本字符集”由如下95个</description></item><item><title>Bind html checkboxes</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindHtmlCheckboxes/</link><pubDate>Tue, 18 Mar 2025 17:00:32 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindHtmlCheckboxes/</guid><description>原文：https://gin-gonic.com/docs/examples/bind-html-checkbox/ 源码 1 2 3 4 5 6 7 8 9 10</description></item><item><title>切片 slice</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/slice/</link><pubDate>Mon, 17 Feb 2025 12:07:35 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/slice/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>常量</title><link>https://before80.github.io/lang/docs/basic/syntax/contant/</link><pubDate>Mon, 17 Feb 2025 11:58:50 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/contant/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>标点</title><link>https://before80.github.io/lang/c/language/punctuators/</link><pubDate>Fri, 11 Apr 2025 19:57:43 +0800</pubDate><guid>https://before80.github.io/lang/c/language/punctuators/</guid><description>原文：https://zh.cppreference.com/w/c/language/punctuators ​ 这些是 C 中的标点符号。每个符</description></item><item><title>BindQueryStringOrPostData</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindQueryStringOrPostData/</link><pubDate>Tue, 18 Mar 2025 17:00:34 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindQueryStringOrPostData/</guid><description>原文：https://gin-gonic.com/docs/examples/bind-query-or-post/ 源码 测试</description></item><item><title>字典 dict（or 映射 map）</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/mapordict/</link><pubDate>Mon, 17 Feb 2025 12:09:25 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/mapordict/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>逻辑结构</title><link>https://before80.github.io/lang/docs/basic/syntax/if/</link><pubDate>Mon, 17 Feb 2025 12:00:07 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/if/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>UsingBasicAuthMiddleware</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UsingBasicAuthMiddleware/</link><pubDate>Tue, 18 Mar 2025 17:01:45 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UsingBasicAuthMiddleware/</guid><description>原文： 源码 测试</description></item><item><title>标识符</title><link>https://before80.github.io/lang/c/language/identifier/</link><pubDate>Fri, 11 Apr 2025 20:03:25 +0800</pubDate><guid>https://before80.github.io/lang/c/language/identifier/</guid><description>原文：https://zh.cppreference.com/w/c/language/identifier ​ 标识符是数字、下划线、小写及大</description></item><item><title>BindUri</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindUri/</link><pubDate>Tue, 18 Mar 2025 17:00:36 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BindUri/</guid><description>原文： 源码 测试</description></item><item><title>元组 tuple</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/tuple/</link><pubDate>Mon, 17 Feb 2025 12:07:27 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/tuple/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>循环结构</title><link>https://before80.github.io/lang/docs/basic/syntax/for/</link><pubDate>Mon, 17 Feb 2025 12:00:13 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/for/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>作用域</title><link>https://before80.github.io/lang/c/language/scope/</link><pubDate>Fri, 11 Apr 2025 20:18:56 +0800</pubDate><guid>https://before80.github.io/lang/c/language/scope/</guid><description>原文：https://zh.cppreference.com/w/c/language/scope ​ C 程序中出现的每个标识符都仅在一些可能不</description></item><item><title>BuildASingleBinaryWithTemplates</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BuildASingleBinaryWithTemplates/</link><pubDate>Tue, 18 Mar 2025 17:00:38 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/BuildASingleBinaryWithTemplates/</guid><description>原文： 源码 测试</description></item><item><title>字符串 string</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/string/</link><pubDate>Mon, 17 Feb 2025 12:10:19 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/string/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>函数</title><link>https://before80.github.io/lang/docs/basic/syntax/function/</link><pubDate>Mon, 17 Feb 2025 11:59:04 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/function/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>生存期</title><link>https://before80.github.io/lang/c/language/lifetime/</link><pubDate>Fri, 11 Apr 2025 20:22:45 +0800</pubDate><guid>https://before80.github.io/lang/c/language/lifetime/</guid><description>原文：https://zh.cppreference.com/w/c/language/lifetime ​ C 中每个对象存在、拥有常地址、保有</description></item><item><title>ControllingLogOutputColoring</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ControllingLogOutputColoring/</link><pubDate>Tue, 18 Mar 2025 17:00:40 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ControllingLogOutputColoring/</guid><description>原文： 源码 测试</description></item><item><title>集合 set</title><link>https://before80.github.io/lang/docs/basic/syntax/structure/set/</link><pubDate>Mon, 17 Feb 2025 12:10:08 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/structure/set/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>类</title><link>https://before80.github.io/lang/docs/basic/syntax/class/</link><pubDate>Mon, 17 Feb 2025 11:59:14 +0800</pubDate><guid>https://before80.github.io/lang/docs/basic/syntax/class/</guid><description>Go Python Java Rust C/C++ JavaScript TypeScript C# Erlang PHP Ruby</description></item><item><title>查找与命名空间</title><link>https://before80.github.io/lang/c/language/name_space/</link><pubDate>Fri, 11 Apr 2025 20:24:38 +0800</pubDate><guid>https://before80.github.io/lang/c/language/name_space/</guid><description>原文：https://zh.cppreference.com/w/c/language/name_space ​ 在 C 程序中遇到标识符时，会查找</description></item><item><title>Cookie</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/Cookie/</link><pubDate>Tue, 18 Mar 2025 17:00:42 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/Cookie/</guid><description>原文： 源码 测试</description></item><item><title>类型</title><link>https://before80.github.io/lang/c/language/type/</link><pubDate>Fri, 11 Apr 2025 20:28:11 +0800</pubDate><guid>https://before80.github.io/lang/c/language/type/</guid><description>原文：https://zh.cppreference.com/w/c/language/type （内建类型上的更多细节参阅算术类型和 C 库所提</description></item><item><title>算术类型</title><link>https://before80.github.io/lang/c/language/arithmetic_types/</link><pubDate>Fri, 11 Apr 2025 20:44:38 +0800</pubDate><guid>https://before80.github.io/lang/c/language/arithmetic_types/</guid><description>原文：https://zh.cppreference.com/w/c/language/arithmetic_types （可参阅类型，以获得</description></item><item><title>CustomHTTPConfiguration</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomHTTPConfiguration/</link><pubDate>Tue, 18 Mar 2025 17:00:44 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomHTTPConfiguration/</guid><description>原文： 源码 测试</description></item><item><title>对象与对齐</title><link>https://before80.github.io/lang/c/language/object/</link><pubDate>Fri, 11 Apr 2025 23:18:21 +0800</pubDate><guid>https://before80.github.io/lang/c/language/object/</guid><description>原文：https://zh.cppreference.com/w/c/language/object ​ C 程序创建、销毁、访问并操作对象。 ​ C</description></item><item><title>CustomLogFile</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomLogFile/</link><pubDate>Tue, 18 Mar 2025 17:00:46 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomLogFile/</guid><description>原文： 源码 测试</description></item><item><title>main 函数</title><link>https://before80.github.io/lang/c/language/main_function/</link><pubDate>Fri, 11 Apr 2025 23:22:30 +0800</pubDate><guid>https://before80.github.io/lang/c/language/main_function/</guid><description>原文：https://zh.cppreference.com/w/c/language/main_function ​ 每个要在宿主环境运行的编</description></item><item><title>CustomMiddleware</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomMiddleware/</link><pubDate>Tue, 18 Mar 2025 17:00:48 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomMiddleware/</guid><description>原文： 源码 测试</description></item><item><title>如同规则</title><link>https://before80.github.io/lang/c/language/as_if/</link><pubDate>Fri, 11 Apr 2025 23:28:37 +0800</pubDate><guid>https://before80.github.io/lang/c/language/as_if/</guid><description>原文：https://zh.cppreference.com/w/c/language/as_if ​ 允许进行任何以及所有的不会改变程序的可观</description></item><item><title>CustomValidators</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomValidators/</link><pubDate>Tue, 18 Mar 2025 17:00:50 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/CustomValidators/</guid><description>原文： 源码 测试</description></item><item><title>未定义行为</title><link>https://before80.github.io/lang/c/language/behavior/</link><pubDate>Fri, 11 Apr 2025 23:31:01 +0800</pubDate><guid>https://before80.github.io/lang/c/language/behavior/</guid><description>原文：https://zh.cppreference.com/w/c/language/behavior ​ C 语言标准精确指定了 C 语言程序的可</description></item><item><title>DefineFormatForTheLogOfRoutes</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/DefineFormatForTheLogOfRoutes/</link><pubDate>Tue, 18 Mar 2025 17:00:52 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/DefineFormatForTheLogOfRoutes/</guid><description>原文： 源码 测试</description></item><item><title>内存模型</title><link>https://before80.github.io/lang/c/language/memory_model/</link><pubDate>Fri, 11 Apr 2025 23:35:02 +0800</pubDate><guid>https://before80.github.io/lang/c/language/memory_model/</guid><description>原文：https://zh.cppreference.com/w/c/language/memory_model ​ 为 C 抽象机的目的，定义计算</description></item><item><title>GoroutinesInsideAMiddleware</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/GoroutinesInsideAMiddleware/</link><pubDate>Tue, 18 Mar 2025 17:00:54 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/GoroutinesInsideAMiddleware/</guid><description>原文： 源码 测试</description></item><item><title>GracefulRestartOrStop</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/GracefulRestartOrStop/</link><pubDate>Tue, 18 Mar 2025 17:00:56 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/GracefulRestartOrStop/</guid><description>原文： 源码 测试</description></item><item><title>GroupingRoutes</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/GroupingRoutes/</link><pubDate>Tue, 18 Mar 2025 17:00:58 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/GroupingRoutes/</guid><description>原文： 源码 测试</description></item><item><title>HowToWriteLogFile</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/HowToWriteLogFile/</link><pubDate>Tue, 18 Mar 2025 17:01:00 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/HowToWriteLogFile/</guid><description>原文： 源码 测试</description></item><item><title>HTMLRendering</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/HTMLRendering/</link><pubDate>Tue, 18 Mar 2025 17:01:02 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/HTMLRendering/</guid><description>原文： 源码 测试</description></item><item><title>HTTP2ServerPush</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/HTTP2ServerPush/</link><pubDate>Tue, 18 Mar 2025 17:01:04 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/HTTP2ServerPush/</guid><description>原文： 源码 测试</description></item><item><title>JSONP</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/JSONP/</link><pubDate>Tue, 18 Mar 2025 17:01:06 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/JSONP/</guid><description>原文： 源码 测试</description></item><item><title>MapAsQuerystringOrPostformParameters</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/MapAsQuerystringOrPostformParameters/</link><pubDate>Tue, 18 Mar 2025 17:01:08 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/MapAsQuerystringOrPostformParameters/</guid><description>原文： 源码 测试</description></item><item><title>ModelBindingAndValidation</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ModelBindingAndValidation/</link><pubDate>Tue, 18 Mar 2025 17:01:10 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ModelBindingAndValidation/</guid><description>原文： 源码 测试</description></item><item><title>MultipartUrlencodedBinding</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/MultipartUrlencodedBinding/</link><pubDate>Tue, 18 Mar 2025 17:01:12 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/MultipartUrlencodedBinding/</guid><description>原文： 源码 测试</description></item><item><title>MultipartUrlencodedForm</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/MultipartUrlencodedForm/</link><pubDate>Tue, 18 Mar 2025 17:01:14 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/MultipartUrlencodedForm/</guid><description>原文： 源码 测试</description></item><item><title>Multitemplate</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/Multitemplate/</link><pubDate>Tue, 18 Mar 2025 17:01:16 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/Multitemplate/</guid><description>原文： 源码 测试</description></item><item><title>OnlyBindQueryString</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/OnlyBindQueryString/</link><pubDate>Tue, 18 Mar 2025 17:01:17 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/OnlyBindQueryString/</guid><description>原文： 源码 测试</description></item><item><title>ParametersInPath</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ParametersInPath/</link><pubDate>Tue, 18 Mar 2025 17:01:19 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ParametersInPath/</guid><description>原文： 源码 测试</description></item><item><title>PureJSON</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/PureJSON/</link><pubDate>Tue, 18 Mar 2025 17:01:21 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/PureJSON/</guid><description>原文： 源码 测试</description></item><item><title>QueryAndPostForm</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/QueryAndPostForm/</link><pubDate>Tue, 18 Mar 2025 17:01:23 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/QueryAndPostForm/</guid><description>原文： 源码 测试</description></item><item><title>QueryStringParameters</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/QueryStringParameters/</link><pubDate>Tue, 18 Mar 2025 17:01:25 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/QueryStringParameters/</guid><description>原文： 源码 测试</description></item><item><title>Redirects</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/Redirects/</link><pubDate>Tue, 18 Mar 2025 17:01:27 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/Redirects/</guid><description>原文： 源码 测试</description></item><item><title>RunMultipleService</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/RunMultipleService/</link><pubDate>Tue, 18 Mar 2025 17:01:29 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/RunMultipleService/</guid><description>原文： 源码 测试</description></item><item><title>SecureJSON</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/SecureJSON/</link><pubDate>Tue, 18 Mar 2025 17:01:31 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/SecureJSON/</guid><description>原文： 源码 测试</description></item><item><title>SecurityHeaders</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/SecurityHeaders/</link><pubDate>Tue, 18 Mar 2025 17:01:33 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/SecurityHeaders/</guid><description>原文： 源码 测试</description></item><item><title>ServingDataFromReader</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ServingDataFromReader/</link><pubDate>Tue, 18 Mar 2025 17:01:35 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ServingDataFromReader/</guid><description>源码 测试</description></item><item><title>ServingStaticFiles</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ServingStaticFiles/</link><pubDate>Tue, 18 Mar 2025 17:01:37 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/ServingStaticFiles/</guid><description>原文： 源码 测试</description></item><item><title>SupportLetsEncrypt</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/SupportLetsEncrypt/</link><pubDate>Tue, 18 Mar 2025 17:01:39 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/SupportLetsEncrypt/</guid><description>原文： 源码 测试</description></item><item><title>TryToBindBodyIntoDifferentStructs</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/TryToBindBodyIntoDifferentStructs/</link><pubDate>Tue, 18 Mar 2025 17:01:42 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/TryToBindBodyIntoDifferentStructs/</guid><description>原文： 源码 测试</description></item><item><title>UploadFiles</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UploadFiles/</link><pubDate>Tue, 18 Mar 2025 17:01:43 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UploadFiles/</guid><description>原文： 源码 测试</description></item><item><title>UsingHTTPMethod</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UsingHTTPMethod/</link><pubDate>Tue, 18 Mar 2025 17:01:47 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UsingHTTPMethod/</guid><description>原文： 源码 测试</description></item><item><title>UsingMiddleware</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UsingMiddleware/</link><pubDate>Tue, 18 Mar 2025 17:01:49 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/UsingMiddleware/</guid><description>原文： 源码 测试</description></item><item><title>WithoutMiddlewareByDefault</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/WithoutMiddlewareByDefault/</link><pubDate>Tue, 18 Mar 2025 17:01:51 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/WithoutMiddlewareByDefault/</guid><description>原文： 源码 测试</description></item><item><title>XMLJSONYAMLProtoBufRendering</title><link>https://before80.github.io/lang/go/frameworks/gin/officeExamples/XMLJSONYAMLProtoBufRendering/</link><pubDate>Tue, 18 Mar 2025 19:25:54 +0800</pubDate><guid>https://before80.github.io/lang/go/frameworks/gin/officeExamples/XMLJSONYAMLProtoBufRendering/</guid><description>原文： 源码 测试</description></item></channel></rss>