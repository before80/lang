<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>标准库 on 编程语言</title><link>https://before80.github.io/lang/c/std/</link><description>Recent content in 标准库 on 编程语言</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 11 Apr 2025 19:34:03 +0800</lastBuildDate><atom:link href="https://before80.github.io/lang/c/std/index.xml" rel="self" type="application/rss+xml"/><item><title> &lt;stdio.h></title><link>https://before80.github.io/lang/c/std/stdio/</link><pubDate>Tue, 15 Apr 2025 19:56:16 +0800</pubDate><guid>https://before80.github.io/lang/c/std/stdio/</guid><description>类型 FILE 原址：https://zh.cppreference.com/w/c/io/FILE 1 typedef /* 未指明 */ FILE; ​ C 标准没有规定 FILE 是否为一个完整的</description></item><item><title>&lt;threads.h></title><link>https://before80.github.io/lang/c/std/threads/</link><pubDate>Tue, 15 Apr 2025 16:56:20 +0800</pubDate><guid>https://before80.github.io/lang/c/std/threads/</guid><description>类型 cnd_t 原址： 1 typedef /* 见描述 */ cnd_t; ​ 条件变量标识符 mtx_t 原址： 1 typedef /* 见描述 */ mtx_t; ​ 互斥体标识符 thrd_start_t 原址： 1 typedef /* 见描述 */ thrd_start_t; thrd_t 原址： 1 typedef /* 见描述 */ thrd_t; tss_dtor_t 原址： 1</description></item><item><title>&lt;ctype.h></title><link>https://before80.github.io/lang/c/std/ctype/</link><pubDate>Tue, 15 Apr 2025 09:12:20 +0800</pubDate><guid>https://before80.github.io/lang/c/std/ctype/</guid><description>原文： 类型 宏 函数 isalnum 原址：https://zh.cppreference.com/w/c/string/byte/isalnum 1 int isalnum( int ch ); ​</description></item><item><title>&lt;assert.h></title><link>https://before80.github.io/lang/c/std/assert/</link><pubDate>Mon, 14 Apr 2025 23:18:36 +0800</pubDate><guid>https://before80.github.io/lang/c/std/assert/</guid><description>宏 assert 原址：https://zh.cppreference.com/w/c/error/assert 1 2 3 4 5 6 7 8 9 10 11 12 13 // (C23 前) #ifdef NDEBUG #define assert(condition)</description></item><item><title>&lt;errno.h></title><link>https://before80.github.io/lang/c/std/errno/</link><pubDate>Mon, 14 Apr 2025 23:11:56 +0800</pubDate><guid>https://before80.github.io/lang/c/std/errno/</guid><description>类型 宏 EDOM 原址：https://zh.cppreference.com/w/c/error/errno_macros 1 #define EDOM /* 由实现定义 */ EILSEQ 原址</description></item><item><title>&lt;stdarg.h></title><link>https://before80.github.io/lang/c/std/stdarg/</link><pubDate>Mon, 14 Apr 2025 22:51:57 +0800</pubDate><guid>https://before80.github.io/lang/c/std/stdarg/</guid><description>原文：https://zh.cppreference.com/w/c/variadic/va_start 类型 va_list 原址：https://zh.c</description></item><item><title>&lt;setjmp.h></title><link>https://before80.github.io/lang/c/std/setjmp/</link><pubDate>Mon, 14 Apr 2025 22:34:39 +0800</pubDate><guid>https://before80.github.io/lang/c/std/setjmp/</guid><description>类型 jmp_buf 原址：https://zh.cppreference.com/w/c/program/jmp_buf 1 typedef /* 未指明 */ jmp_buf; ​ jmp_buf 类型是适合于存</description></item><item><title>&lt;signal.h></title><link>https://before80.github.io/lang/c/std/signal/</link><pubDate>Mon, 14 Apr 2025 22:17:16 +0800</pubDate><guid>https://before80.github.io/lang/c/std/signal/</guid><description>类型 sig_atomic_t 原址：https://zh.cppreference.com/w/c/program/sig_atomic_t 1 typedef /* 未指明 */ sig_atomic_t; ​ 即使在</description></item><item><title>&lt;stddef.h></title><link>https://before80.github.io/lang/c/std/stddef/</link><pubDate>Mon, 14 Apr 2025 22:03:04 +0800</pubDate><guid>https://before80.github.io/lang/c/std/stddef/</guid><description>宏 unreachable &amp;lt;- 23+ 1 #define unreachable() /* 见下文 */ (C23 起) ​ 仿函数宏 unreachable 展开成 void 表达式。执行 unreachable() 导致未定义行为。 ​ 实现可以用此宏优化掉不可能的代码分支（常于优化构建中），或</description></item><item><title>&lt;stdlib.h></title><link>https://before80.github.io/lang/c/std/stdlib/</link><pubDate>Mon, 14 Apr 2025 16:54:35 +0800</pubDate><guid>https://before80.github.io/lang/c/std/stdlib/</guid><description>类型 constraint_handler_t 1 2 3 typedef void (*constraint_handler_t)( const char *restrict msg, void *restrict ptr, errno_t error); // (2) (C11 起) ​ 参见：set_constraint_handler_s 函数 宏 EXIT_SUCCESS 原址：https://zh.c</description></item></channel></rss>